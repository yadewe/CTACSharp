//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CTACSharp.CTP.Market {

public class CThostFtdcMdApi : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CThostFtdcMdApi(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CThostFtdcMdApi obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static CThostFtdcMdApi CreateFtdcMdApi(string pszFlowPath, bool bIsUsingUdp, bool bIsMulticast) {
    global::System.IntPtr cPtr = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_0(pszFlowPath, bIsUsingUdp, bIsMulticast);
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static CThostFtdcMdApi CreateFtdcMdApi(string pszFlowPath, bool bIsUsingUdp) {
    global::System.IntPtr cPtr = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_1(pszFlowPath, bIsUsingUdp);
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static CThostFtdcMdApi CreateFtdcMdApi(string pszFlowPath) {
    global::System.IntPtr cPtr = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_2(pszFlowPath);
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static CThostFtdcMdApi CreateFtdcMdApi() {
    global::System.IntPtr cPtr = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_3();
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static string GetApiVersion() {
    string ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_GetApiVersion();
    return ret;
  }

  public virtual void Release() {
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_Release(swigCPtr);
  }

  public virtual void Init() {
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_Init(swigCPtr);
  }

  public virtual int Join() {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_Join(swigCPtr);
    return ret;
  }

  public virtual string GetTradingDay() {
    string ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_GetTradingDay(swigCPtr);
    return ret;
  }

  public virtual void RegisterFront(string pszFrontAddress) {
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_RegisterFront(swigCPtr, pszFrontAddress);
  }

  public virtual void RegisterNameServer(string pszNsAddress) {
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_RegisterNameServer(swigCPtr, pszNsAddress);
  }

  public virtual void RegisterFensUserInfo(CThostFtdcFensUserInfoField pFensUserInfo) {
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_RegisterFensUserInfo(swigCPtr, CThostFtdcFensUserInfoField.getCPtr(pFensUserInfo));
  }

  public virtual void RegisterSpi(CThostFtdcMdSpi pSpi) {
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_RegisterSpi(swigCPtr, CThostFtdcMdSpi.getCPtr(pSpi));
  }

  public virtual int SubscribeMarketData(string[] ppInstrumentID, int nCount) {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_SubscribeMarketData(swigCPtr, SWIGTYPE_p_p_char.getCPtr(ppInstrumentID), nCount);
    return ret;
  }

  public virtual int UnSubscribeMarketData(string[] ppInstrumentID, int nCount) {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_UnSubscribeMarketData(swigCPtr, SWIGTYPE_p_p_char.getCPtr(ppInstrumentID), nCount);
    return ret;
  }

  public virtual int SubscribeForQuoteRsp(string[] ppInstrumentID, int nCount) {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_SubscribeForQuoteRsp(swigCPtr, SWIGTYPE_p_p_char.getCPtr(ppInstrumentID), nCount);
    return ret;
  }

  public virtual int UnSubscribeForQuoteRsp(string[] ppInstrumentID, int nCount) {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_UnSubscribeForQuoteRsp(swigCPtr, SWIGTYPE_p_p_char.getCPtr(ppInstrumentID), nCount);
    return ret;
  }

  public virtual int ReqUserLogin(CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID) {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_ReqUserLogin(swigCPtr, CThostFtdcReqUserLoginField.getCPtr(pReqUserLoginField), nRequestID);
    return ret;
  }

  public virtual int ReqUserLogout(CThostFtdcUserLogoutField pUserLogout, int nRequestID) {
    int ret = CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_ReqUserLogout(swigCPtr, CThostFtdcUserLogoutField.getCPtr(pUserLogout), nRequestID);
    return ret;
  }

  public CThostFtdcMdApi() : this(CTPMarketCppWrapperPINVOKE.new_CThostFtdcMdApi(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Release", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCThostFtdcMdApi_0(SwigDirectorRelease);
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCThostFtdcMdApi_1(SwigDirectorInit);
    if (SwigDerivedClassHasMethod("Join", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCThostFtdcMdApi_2(SwigDirectorJoin);
    if (SwigDerivedClassHasMethod("GetTradingDay", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCThostFtdcMdApi_3(SwigDirectorGetTradingDay);
    if (SwigDerivedClassHasMethod("RegisterFront", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateCThostFtdcMdApi_4(SwigDirectorRegisterFront);
    if (SwigDerivedClassHasMethod("RegisterNameServer", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateCThostFtdcMdApi_5(SwigDirectorRegisterNameServer);
    if (SwigDerivedClassHasMethod("RegisterFensUserInfo", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateCThostFtdcMdApi_6(SwigDirectorRegisterFensUserInfo);
    if (SwigDerivedClassHasMethod("RegisterSpi", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateCThostFtdcMdApi_7(SwigDirectorRegisterSpi);
    if (SwigDerivedClassHasMethod("SubscribeMarketData", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateCThostFtdcMdApi_8(SwigDirectorSubscribeMarketData);
    if (SwigDerivedClassHasMethod("UnSubscribeMarketData", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateCThostFtdcMdApi_9(SwigDirectorUnSubscribeMarketData);
    if (SwigDerivedClassHasMethod("SubscribeForQuoteRsp", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateCThostFtdcMdApi_10(SwigDirectorSubscribeForQuoteRsp);
    if (SwigDerivedClassHasMethod("UnSubscribeForQuoteRsp", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateCThostFtdcMdApi_11(SwigDirectorUnSubscribeForQuoteRsp);
    if (SwigDerivedClassHasMethod("ReqUserLogin", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateCThostFtdcMdApi_12(SwigDirectorReqUserLogin);
    if (SwigDerivedClassHasMethod("ReqUserLogout", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateCThostFtdcMdApi_13(SwigDirectorReqUserLogout);
    CTPMarketCppWrapperPINVOKE.CThostFtdcMdApi_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(CThostFtdcMdApi));
    return hasDerivedMethod;
  }

  private void SwigDirectorRelease() {
    Release();
  }

  private void SwigDirectorInit() {
    Init();
  }

  private int SwigDirectorJoin() {
    return Join();
  }

  private string SwigDirectorGetTradingDay() {
    return GetTradingDay();
  }

  private void SwigDirectorRegisterFront(string pszFrontAddress) {
    RegisterFront(pszFrontAddress);
  }

  private void SwigDirectorRegisterNameServer(string pszNsAddress) {
    RegisterNameServer(pszNsAddress);
  }

  private void SwigDirectorRegisterFensUserInfo(global::System.IntPtr pFensUserInfo) {
    RegisterFensUserInfo((pFensUserInfo == global::System.IntPtr.Zero) ? null : new CThostFtdcFensUserInfoField(pFensUserInfo, false));
  }

  private void SwigDirectorRegisterSpi(global::System.IntPtr pSpi) {
    RegisterSpi((pSpi == global::System.IntPtr.Zero) ? null : new CThostFtdcMdSpi(pSpi, false));
  }

  private int SwigDirectorSubscribeMarketData(string[] ppInstrumentID, int nCount) {
    return SubscribeMarketData((ppInstrumentID == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(ppInstrumentID, false), nCount);
  }

  private int SwigDirectorUnSubscribeMarketData(string[] ppInstrumentID, int nCount) {
    return UnSubscribeMarketData((ppInstrumentID == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(ppInstrumentID, false), nCount);
  }

  private int SwigDirectorSubscribeForQuoteRsp(string[] ppInstrumentID, int nCount) {
    return SubscribeForQuoteRsp((ppInstrumentID == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(ppInstrumentID, false), nCount);
  }

  private int SwigDirectorUnSubscribeForQuoteRsp(string[] ppInstrumentID, int nCount) {
    return UnSubscribeForQuoteRsp((ppInstrumentID == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(ppInstrumentID, false), nCount);
  }

  private int SwigDirectorReqUserLogin(global::System.IntPtr pReqUserLoginField, int nRequestID) {
    return ReqUserLogin((pReqUserLoginField == global::System.IntPtr.Zero) ? null : new CThostFtdcReqUserLoginField(pReqUserLoginField, false), nRequestID);
  }

  private int SwigDirectorReqUserLogout(global::System.IntPtr pUserLogout, int nRequestID) {
    return ReqUserLogout((pUserLogout == global::System.IntPtr.Zero) ? null : new CThostFtdcUserLogoutField(pUserLogout, false), nRequestID);
  }

  public delegate void SwigDelegateCThostFtdcMdApi_0();
  public delegate void SwigDelegateCThostFtdcMdApi_1();
  public delegate int SwigDelegateCThostFtdcMdApi_2();
  public delegate string SwigDelegateCThostFtdcMdApi_3();
  public delegate void SwigDelegateCThostFtdcMdApi_4(string pszFrontAddress);
  public delegate void SwigDelegateCThostFtdcMdApi_5(string pszNsAddress);
  public delegate void SwigDelegateCThostFtdcMdApi_6(global::System.IntPtr pFensUserInfo);
  public delegate void SwigDelegateCThostFtdcMdApi_7(global::System.IntPtr pSpi);
  public delegate int SwigDelegateCThostFtdcMdApi_8(string[] ppInstrumentID, int nCount);
  public delegate int SwigDelegateCThostFtdcMdApi_9(string[] ppInstrumentID, int nCount);
  public delegate int SwigDelegateCThostFtdcMdApi_10(string[] ppInstrumentID, int nCount);
  public delegate int SwigDelegateCThostFtdcMdApi_11(string[] ppInstrumentID, int nCount);
  public delegate int SwigDelegateCThostFtdcMdApi_12(global::System.IntPtr pReqUserLoginField, int nRequestID);
  public delegate int SwigDelegateCThostFtdcMdApi_13(global::System.IntPtr pUserLogout, int nRequestID);

  private SwigDelegateCThostFtdcMdApi_0 swigDelegate0;
  private SwigDelegateCThostFtdcMdApi_1 swigDelegate1;
  private SwigDelegateCThostFtdcMdApi_2 swigDelegate2;
  private SwigDelegateCThostFtdcMdApi_3 swigDelegate3;
  private SwigDelegateCThostFtdcMdApi_4 swigDelegate4;
  private SwigDelegateCThostFtdcMdApi_5 swigDelegate5;
  private SwigDelegateCThostFtdcMdApi_6 swigDelegate6;
  private SwigDelegateCThostFtdcMdApi_7 swigDelegate7;
  private SwigDelegateCThostFtdcMdApi_8 swigDelegate8;
  private SwigDelegateCThostFtdcMdApi_9 swigDelegate9;
  private SwigDelegateCThostFtdcMdApi_10 swigDelegate10;
  private SwigDelegateCThostFtdcMdApi_11 swigDelegate11;
  private SwigDelegateCThostFtdcMdApi_12 swigDelegate12;
  private SwigDelegateCThostFtdcMdApi_13 swigDelegate13;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(CThostFtdcFensUserInfoField) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(CThostFtdcMdSpi) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(string[]), typeof(int) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(string[]), typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(string[]), typeof(int) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(string[]), typeof(int) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(CThostFtdcReqUserLoginField), typeof(int) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(CThostFtdcUserLogoutField), typeof(int) };
}

}
