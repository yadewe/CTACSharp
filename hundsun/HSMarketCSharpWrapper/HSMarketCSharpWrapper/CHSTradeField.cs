//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CTACSharp.HS.Market {

public class CHSTradeField : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CHSTradeField(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CHSTradeField obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CHSTradeField() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HSMarketCppWrapperPINVOKE.delete_CHSTradeField(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string AccountID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_AccountID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_AccountID_get(swigCPtr);
      return ret;
    } 
  }

  public string TradeID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_TradeID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_TradeID_get(swigCPtr);
      return ret;
    } 
  }

  public string OrderSysID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_OrderSysID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_OrderSysID_get(swigCPtr);
      return ret;
    } 
  }

  public string BrokerOrderID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_BrokerOrderID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_BrokerOrderID_get(swigCPtr);
      return ret;
    } 
  }

  public int SessionID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_SessionID_set(swigCPtr, value);
    } 
    get {
      int ret = HSMarketCppWrapperPINVOKE.CHSTradeField_SessionID_get(swigCPtr);
      return ret;
    } 
  }

  public string OrderRef {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_OrderRef_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_OrderRef_get(swigCPtr);
      return ret;
    } 
  }

  public string ExchangeID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_ExchangeID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_ExchangeID_get(swigCPtr);
      return ret;
    } 
  }

  public string InstrumentID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_InstrumentID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_InstrumentID_get(swigCPtr);
      return ret;
    } 
  }

  public char Direction {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_Direction_set(swigCPtr, value);
    } 
    get {
      char ret = HSMarketCppWrapperPINVOKE.CHSTradeField_Direction_get(swigCPtr);
      return ret;
    } 
  }

  public char OffsetFlag {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_OffsetFlag_set(swigCPtr, value);
    } 
    get {
      char ret = HSMarketCppWrapperPINVOKE.CHSTradeField_OffsetFlag_get(swigCPtr);
      return ret;
    } 
  }

  public char HedgeType {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_HedgeType_set(swigCPtr, value);
    } 
    get {
      char ret = HSMarketCppWrapperPINVOKE.CHSTradeField_HedgeType_get(swigCPtr);
      return ret;
    } 
  }

  public double TradeVolume {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_TradeVolume_set(swigCPtr, value);
    } 
    get {
      double ret = HSMarketCppWrapperPINVOKE.CHSTradeField_TradeVolume_get(swigCPtr);
      return ret;
    } 
  }

  public double TradePrice {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_TradePrice_set(swigCPtr, value);
    } 
    get {
      double ret = HSMarketCppWrapperPINVOKE.CHSTradeField_TradePrice_get(swigCPtr);
      return ret;
    } 
  }

  public int TradingDay {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_TradingDay_set(swigCPtr, value);
    } 
    get {
      int ret = HSMarketCppWrapperPINVOKE.CHSTradeField_TradingDay_get(swigCPtr);
      return ret;
    } 
  }

  public int TradeTime {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_TradeTime_set(swigCPtr, value);
    } 
    get {
      int ret = HSMarketCppWrapperPINVOKE.CHSTradeField_TradeTime_get(swigCPtr);
      return ret;
    } 
  }

  public string UnderlyingInstrID {
    set {
      HSMarketCppWrapperPINVOKE.CHSTradeField_UnderlyingInstrID_set(swigCPtr, value);
    } 
    get {
      string ret = HSMarketCppWrapperPINVOKE.CHSTradeField_UnderlyingInstrID_get(swigCPtr);
      return ret;
    } 
  }

  public CHSTradeField() : this(HSMarketCppWrapperPINVOKE.new_CHSTradeField(), true) {
  }

}

}
