/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_HSTradeCppWrapper(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_HSTradeCppWrapper(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_HSTradeCppWrapper(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "HSDataType.h"
#include "HSStruct.h"
#include "HSTradeApi.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "HSTradeCppWrapper_wrap.h"

SwigDirector_CHSTradeSpi::SwigDirector_CHSTradeSpi() : CHSTradeSpi(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_CHSTradeSpi::OnFrontConnected() {
  if (!swig_callbackOnFrontConnected) {
    CHSTradeSpi::OnFrontConnected();
    return;
  } else {
    swig_callbackOnFrontConnected();
  }
}

void SwigDirector_CHSTradeSpi::OnFrontDisconnected(int nResult) {
  int jnResult  ;
  
  if (!swig_callbackOnFrontDisconnected) {
    CHSTradeSpi::OnFrontDisconnected(nResult);
    return;
  } else {
    jnResult = nResult;
    swig_callbackOnFrontDisconnected(jnResult);
  }
}

void SwigDirector_CHSTradeSpi::OnRspUserLogin(CHSRspUserLoginField *pRspUserLogin, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspUserLogin = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspUserLogin) {
    CHSTradeSpi::OnRspUserLogin(pRspUserLogin,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspUserLogin = (void *) pRspUserLogin; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspUserLogin(jpRspUserLogin, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspUserPasswordUpdate(CHSRspUserPasswordUpdateField *pRspUserPasswordUpdate, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspUserPasswordUpdate = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspUserPasswordUpdate) {
    CHSTradeSpi::OnRspUserPasswordUpdate(pRspUserPasswordUpdate,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspUserPasswordUpdate = (void *) pRspUserPasswordUpdate; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspUserPasswordUpdate(jpRspUserPasswordUpdate, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspErrorOrderInsert(CHSRspOrderInsertField *pRspOrderInsert, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspOrderInsert = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspErrorOrderInsert) {
    CHSTradeSpi::OnRspErrorOrderInsert(pRspOrderInsert,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspOrderInsert = (void *) pRspOrderInsert; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspErrorOrderInsert(jpRspOrderInsert, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspOrderAction(CHSRspOrderActionField *pRspOrderAction, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspOrderAction = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspOrderAction) {
    CHSTradeSpi::OnRspOrderAction(pRspOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspOrderAction = (void *) pRspOrderAction; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspOrderAction(jpRspOrderAction, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspErrorExerciseOrderInsert(CHSRspExerciseOrderInsertField *pRspExerciseOrderInsert, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspExerciseOrderInsert = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspErrorExerciseOrderInsert) {
    CHSTradeSpi::OnRspErrorExerciseOrderInsert(pRspExerciseOrderInsert,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspExerciseOrderInsert = (void *) pRspExerciseOrderInsert; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspErrorExerciseOrderInsert(jpRspExerciseOrderInsert, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspExerciseOrderAction(CHSRspExerciseOrderActionField *pRspExerciseOrderAction, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspExerciseOrderAction = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspExerciseOrderAction) {
    CHSTradeSpi::OnRspExerciseOrderAction(pRspExerciseOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspExerciseOrderAction = (void *) pRspExerciseOrderAction; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspExerciseOrderAction(jpRspExerciseOrderAction, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspErrorLockInsert(CHSRspLockInsertField *pRspExerciseOrderAction, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspExerciseOrderAction = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspErrorLockInsert) {
    CHSTradeSpi::OnRspErrorLockInsert(pRspExerciseOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspExerciseOrderAction = (void *) pRspExerciseOrderAction; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspErrorLockInsert(jpRspExerciseOrderAction, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspForQuoteInsert(CHSRspForQuoteInsertField *pRspForQuoteInsert, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspForQuoteInsert = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspForQuoteInsert) {
    CHSTradeSpi::OnRspForQuoteInsert(pRspForQuoteInsert,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspForQuoteInsert = (void *) pRspForQuoteInsert; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspForQuoteInsert(jpRspForQuoteInsert, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspErrorCombActionInsert(CHSRspCombActionInsertField *pRspCombActionInsert, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspCombActionInsert = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspErrorCombActionInsert) {
    CHSTradeSpi::OnRspErrorCombActionInsert(pRspCombActionInsert,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspCombActionInsert = (void *) pRspCombActionInsert; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspErrorCombActionInsert(jpRspCombActionInsert, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQueryMaxOrderVolume(CHSRspQueryMaxOrderVolumeField *pRspQueryMaxOrderVolume, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQueryMaxOrderVolume = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQueryMaxOrderVolume) {
    CHSTradeSpi::OnRspQueryMaxOrderVolume(pRspQueryMaxOrderVolume,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQueryMaxOrderVolume = (void *) pRspQueryMaxOrderVolume; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQueryMaxOrderVolume(jpRspQueryMaxOrderVolume, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQueryLockVolume(CHSRspQueryLockVolumeField *pRspQueryLockVolume, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQueryLockVolume = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQueryLockVolume) {
    CHSTradeSpi::OnRspQueryLockVolume(pRspQueryLockVolume,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQueryLockVolume = (void *) pRspQueryLockVolume; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQueryLockVolume(jpRspQueryLockVolume, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQueryExerciseVolume(CHSRspQueryExerciseVolumeField *pRspQueryExerciseVolume, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQueryExerciseVolume = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQueryExerciseVolume) {
    CHSTradeSpi::OnRspQueryExerciseVolume(pRspQueryExerciseVolume,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQueryExerciseVolume = (void *) pRspQueryExerciseVolume; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQueryExerciseVolume(jpRspQueryExerciseVolume, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryPosition(CHSRspQryPositionField *pRspQryPosition, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryPosition = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryPosition) {
    CHSTradeSpi::OnRspQryPosition(pRspQryPosition,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryPosition = (void *) pRspQryPosition; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryPosition(jpRspQryPosition, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryTradingAccount(CHSRspQryTradingAccountField *pRspQryTradingAccount, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryTradingAccount = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryTradingAccount) {
    CHSTradeSpi::OnRspQryTradingAccount(pRspQryTradingAccount,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryTradingAccount = (void *) pRspQryTradingAccount; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryTradingAccount(jpRspQryTradingAccount, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryOrder(CHSOrderField *pRspQryOrder, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryOrder = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryOrder) {
    CHSTradeSpi::OnRspQryOrder(pRspQryOrder,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryOrder = (void *) pRspQryOrder; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryOrder(jpRspQryOrder, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryTrade(CHSTradeField *pRspQryTrade, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryTrade = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryTrade) {
    CHSTradeSpi::OnRspQryTrade(pRspQryTrade,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryTrade = (void *) pRspQryTrade; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryTrade(jpRspQryTrade, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryExercise(CHSExerciseField *pRspQryExercise, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryExercise = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryExercise) {
    CHSTradeSpi::OnRspQryExercise(pRspQryExercise,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryExercise = (void *) pRspQryExercise; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryExercise(jpRspQryExercise, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryLock(CHSLockField *pRspQryLock, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryLock = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryLock) {
    CHSTradeSpi::OnRspQryLock(pRspQryLock,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryLock = (void *) pRspQryLock; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryLock(jpRspQryLock, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryCombAction(CHSCombActionField *pRspQryCombAction, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryCombAction = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryCombAction) {
    CHSTradeSpi::OnRspQryCombAction(pRspQryCombAction,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryCombAction = (void *) pRspQryCombAction; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryCombAction(jpRspQryCombAction, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryPositionCombineDetail(CHSRspQryPositionCombineDetailField *pRspQryPositionCombineDetail, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryPositionCombineDetail = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryPositionCombineDetail) {
    CHSTradeSpi::OnRspQryPositionCombineDetail(pRspQryPositionCombineDetail,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryPositionCombineDetail = (void *) pRspQryPositionCombineDetail; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryPositionCombineDetail(jpRspQryPositionCombineDetail, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryInstrument(CHSRspQryInstrumentField *pRspQryInstrument, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryInstrument = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryInstrument) {
    CHSTradeSpi::OnRspQryInstrument(pRspQryInstrument,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryInstrument = (void *) pRspQryInstrument; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryInstrument(jpRspQryInstrument, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryCoveredShort(CHSRspQryCoveredShortField *pRspQryCoveredShort, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryCoveredShort = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryCoveredShort) {
    CHSTradeSpi::OnRspQryCoveredShort(pRspQryCoveredShort,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryCoveredShort = (void *) pRspQryCoveredShort; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryCoveredShort(jpRspQryCoveredShort, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryExerciseAssign(CHSRspQryExerciseAssignField *pRspQryExerciseAssign, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryExerciseAssign = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryExerciseAssign) {
    CHSTradeSpi::OnRspQryExerciseAssign(pRspQryExerciseAssign,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryExerciseAssign = (void *) pRspQryExerciseAssign; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryExerciseAssign(jpRspQryExerciseAssign, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspTransfer(CHSRspTransferField *pRspTransfer, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspTransfer = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspTransfer) {
    CHSTradeSpi::OnRspTransfer(pRspTransfer,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspTransfer = (void *) pRspTransfer; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspTransfer(jpRspTransfer, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryTransfer(CHSRspQryTransferField *pRspQryTransfer, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryTransfer = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryTransfer) {
    CHSTradeSpi::OnRspQryTransfer(pRspQryTransfer,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryTransfer = (void *) pRspQryTransfer; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryTransfer(jpRspQryTransfer, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQueryBankBalance(CHSRspQueryBankBalanceField *pRspQueryBankBalance, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQueryBankBalance = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQueryBankBalance) {
    CHSTradeSpi::OnRspQueryBankBalance(pRspQueryBankBalance,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQueryBankBalance = (void *) pRspQueryBankBalance; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQueryBankBalance(jpRspQueryBankBalance, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQueryBankAccount(CHSRspQueryBankAccountField *pRspQueryBankAccount, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQueryBankAccount = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQueryBankAccount) {
    CHSTradeSpi::OnRspQueryBankAccount(pRspQueryBankAccount,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQueryBankAccount = (void *) pRspQueryBankAccount; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQueryBankAccount(jpRspQueryBankAccount, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQueryBillContent(CHSRspQueryBillContentField *pRspQueryBillContent, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQueryBillContent = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQueryBillContent) {
    CHSTradeSpi::OnRspQueryBillContent(pRspQueryBillContent,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQueryBillContent = (void *) pRspQueryBillContent; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQueryBillContent(jpRspQueryBillContent, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspBillConfirm(CHSRspBillConfirmField *pRspBillConfirm, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspBillConfirm = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspBillConfirm) {
    CHSTradeSpi::OnRspBillConfirm(pRspBillConfirm,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspBillConfirm = (void *) pRspBillConfirm; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspBillConfirm(jpRspBillConfirm, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryMargin(CHSRspQryMarginField *pRspQryMargin, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryMargin = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryMargin) {
    CHSTradeSpi::OnRspQryMargin(pRspQryMargin,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryMargin = (void *) pRspQryMargin; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryMargin(jpRspQryMargin, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryCommission(CHSRspQryCommissionField *pRspQryCommission, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryCommission = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryCommission) {
    CHSTradeSpi::OnRspQryCommission(pRspQryCommission,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryCommission = (void *) pRspQryCommission; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryCommission(jpRspQryCommission, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryPositionDetail(CHSRspQryPositionDetailField *pRspQryPositionDetail, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryPositionDetail = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryPositionDetail) {
    CHSTradeSpi::OnRspQryPositionDetail(pRspQryPositionDetail,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryPositionDetail = (void *) pRspQryPositionDetail; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryPositionDetail(jpRspQryPositionDetail, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQrySysConfig(CHSRspQrySysConfigField *pRspQrySysConfig, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQrySysConfig = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQrySysConfig) {
    CHSTradeSpi::OnRspQrySysConfig(pRspQrySysConfig,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQrySysConfig = (void *) pRspQrySysConfig; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQrySysConfig(jpRspQrySysConfig, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRspQryDepthMarketData(CHSDepthMarketDataField *pRspQryDepthMarketData, CHSRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  void * jpRspQryDepthMarketData = 0 ;
  void * jpRspInfo = 0 ;
  int jnRequestID  ;
  unsigned int jbIsLast  ;
  
  if (!swig_callbackOnRspQryDepthMarketData) {
    CHSTradeSpi::OnRspQryDepthMarketData(pRspQryDepthMarketData,pRspInfo,nRequestID,bIsLast);
    return;
  } else {
    jpRspQryDepthMarketData = (void *) pRspQryDepthMarketData; 
    jpRspInfo = (void *) pRspInfo; 
    jnRequestID = nRequestID;
    jbIsLast = bIsLast;
    swig_callbackOnRspQryDepthMarketData(jpRspQryDepthMarketData, jpRspInfo, jnRequestID, jbIsLast);
  }
}

void SwigDirector_CHSTradeSpi::OnRtnTrade(CHSTradeField *pRtnTrade) {
  void * jpRtnTrade = 0 ;
  
  if (!swig_callbackOnRtnTrade) {
    CHSTradeSpi::OnRtnTrade(pRtnTrade);
    return;
  } else {
    jpRtnTrade = (void *) pRtnTrade; 
    swig_callbackOnRtnTrade(jpRtnTrade);
  }
}

void SwigDirector_CHSTradeSpi::OnRtnOrder(CHSOrderField *pRtnOrder) {
  void * jpRtnOrder = 0 ;
  
  if (!swig_callbackOnRtnOrder) {
    CHSTradeSpi::OnRtnOrder(pRtnOrder);
    return;
  } else {
    jpRtnOrder = (void *) pRtnOrder; 
    swig_callbackOnRtnOrder(jpRtnOrder);
  }
}

void SwigDirector_CHSTradeSpi::OnRtnExercise(CHSExerciseField *pRtnExercise) {
  void * jpRtnExercise = 0 ;
  
  if (!swig_callbackOnRtnExercise) {
    CHSTradeSpi::OnRtnExercise(pRtnExercise);
    return;
  } else {
    jpRtnExercise = (void *) pRtnExercise; 
    swig_callbackOnRtnExercise(jpRtnExercise);
  }
}

void SwigDirector_CHSTradeSpi::OnRtnCombAction(CHSCombActionField *pRtnCombAction) {
  void * jpRtnCombAction = 0 ;
  
  if (!swig_callbackOnRtnCombAction) {
    CHSTradeSpi::OnRtnCombAction(pRtnCombAction);
    return;
  } else {
    jpRtnCombAction = (void *) pRtnCombAction; 
    swig_callbackOnRtnCombAction(jpRtnCombAction);
  }
}

void SwigDirector_CHSTradeSpi::OnRtnLock(CHSLockField *pRtnLock) {
  void * jpRtnLock = 0 ;
  
  if (!swig_callbackOnRtnLock) {
    CHSTradeSpi::OnRtnLock(pRtnLock);
    return;
  } else {
    jpRtnLock = (void *) pRtnLock; 
    swig_callbackOnRtnLock(jpRtnLock);
  }
}

void SwigDirector_CHSTradeSpi::swig_connect_director(SWIG_Callback0_t callbackOnFrontConnected, SWIG_Callback1_t callbackOnFrontDisconnected, SWIG_Callback2_t callbackOnRspUserLogin, SWIG_Callback3_t callbackOnRspUserPasswordUpdate, SWIG_Callback4_t callbackOnRspErrorOrderInsert, SWIG_Callback5_t callbackOnRspOrderAction, SWIG_Callback6_t callbackOnRspErrorExerciseOrderInsert, SWIG_Callback7_t callbackOnRspExerciseOrderAction, SWIG_Callback8_t callbackOnRspErrorLockInsert, SWIG_Callback9_t callbackOnRspForQuoteInsert, SWIG_Callback10_t callbackOnRspErrorCombActionInsert, SWIG_Callback11_t callbackOnRspQueryMaxOrderVolume, SWIG_Callback12_t callbackOnRspQueryLockVolume, SWIG_Callback13_t callbackOnRspQueryExerciseVolume, SWIG_Callback14_t callbackOnRspQryPosition, SWIG_Callback15_t callbackOnRspQryTradingAccount, SWIG_Callback16_t callbackOnRspQryOrder, SWIG_Callback17_t callbackOnRspQryTrade, SWIG_Callback18_t callbackOnRspQryExercise, SWIG_Callback19_t callbackOnRspQryLock, SWIG_Callback20_t callbackOnRspQryCombAction, SWIG_Callback21_t callbackOnRspQryPositionCombineDetail, SWIG_Callback22_t callbackOnRspQryInstrument, SWIG_Callback23_t callbackOnRspQryCoveredShort, SWIG_Callback24_t callbackOnRspQryExerciseAssign, SWIG_Callback25_t callbackOnRspTransfer, SWIG_Callback26_t callbackOnRspQryTransfer, SWIG_Callback27_t callbackOnRspQueryBankBalance, SWIG_Callback28_t callbackOnRspQueryBankAccount, SWIG_Callback29_t callbackOnRspQueryBillContent, SWIG_Callback30_t callbackOnRspBillConfirm, SWIG_Callback31_t callbackOnRspQryMargin, SWIG_Callback32_t callbackOnRspQryCommission, SWIG_Callback33_t callbackOnRspQryPositionDetail, SWIG_Callback34_t callbackOnRspQrySysConfig, SWIG_Callback35_t callbackOnRspQryDepthMarketData, SWIG_Callback36_t callbackOnRtnTrade, SWIG_Callback37_t callbackOnRtnOrder, SWIG_Callback38_t callbackOnRtnExercise, SWIG_Callback39_t callbackOnRtnCombAction, SWIG_Callback40_t callbackOnRtnLock) {
  swig_callbackOnFrontConnected = callbackOnFrontConnected;
  swig_callbackOnFrontDisconnected = callbackOnFrontDisconnected;
  swig_callbackOnRspUserLogin = callbackOnRspUserLogin;
  swig_callbackOnRspUserPasswordUpdate = callbackOnRspUserPasswordUpdate;
  swig_callbackOnRspErrorOrderInsert = callbackOnRspErrorOrderInsert;
  swig_callbackOnRspOrderAction = callbackOnRspOrderAction;
  swig_callbackOnRspErrorExerciseOrderInsert = callbackOnRspErrorExerciseOrderInsert;
  swig_callbackOnRspExerciseOrderAction = callbackOnRspExerciseOrderAction;
  swig_callbackOnRspErrorLockInsert = callbackOnRspErrorLockInsert;
  swig_callbackOnRspForQuoteInsert = callbackOnRspForQuoteInsert;
  swig_callbackOnRspErrorCombActionInsert = callbackOnRspErrorCombActionInsert;
  swig_callbackOnRspQueryMaxOrderVolume = callbackOnRspQueryMaxOrderVolume;
  swig_callbackOnRspQueryLockVolume = callbackOnRspQueryLockVolume;
  swig_callbackOnRspQueryExerciseVolume = callbackOnRspQueryExerciseVolume;
  swig_callbackOnRspQryPosition = callbackOnRspQryPosition;
  swig_callbackOnRspQryTradingAccount = callbackOnRspQryTradingAccount;
  swig_callbackOnRspQryOrder = callbackOnRspQryOrder;
  swig_callbackOnRspQryTrade = callbackOnRspQryTrade;
  swig_callbackOnRspQryExercise = callbackOnRspQryExercise;
  swig_callbackOnRspQryLock = callbackOnRspQryLock;
  swig_callbackOnRspQryCombAction = callbackOnRspQryCombAction;
  swig_callbackOnRspQryPositionCombineDetail = callbackOnRspQryPositionCombineDetail;
  swig_callbackOnRspQryInstrument = callbackOnRspQryInstrument;
  swig_callbackOnRspQryCoveredShort = callbackOnRspQryCoveredShort;
  swig_callbackOnRspQryExerciseAssign = callbackOnRspQryExerciseAssign;
  swig_callbackOnRspTransfer = callbackOnRspTransfer;
  swig_callbackOnRspQryTransfer = callbackOnRspQryTransfer;
  swig_callbackOnRspQueryBankBalance = callbackOnRspQueryBankBalance;
  swig_callbackOnRspQueryBankAccount = callbackOnRspQueryBankAccount;
  swig_callbackOnRspQueryBillContent = callbackOnRspQueryBillContent;
  swig_callbackOnRspBillConfirm = callbackOnRspBillConfirm;
  swig_callbackOnRspQryMargin = callbackOnRspQryMargin;
  swig_callbackOnRspQryCommission = callbackOnRspQryCommission;
  swig_callbackOnRspQryPositionDetail = callbackOnRspQryPositionDetail;
  swig_callbackOnRspQrySysConfig = callbackOnRspQrySysConfig;
  swig_callbackOnRspQryDepthMarketData = callbackOnRspQryDepthMarketData;
  swig_callbackOnRtnTrade = callbackOnRtnTrade;
  swig_callbackOnRtnOrder = callbackOnRtnOrder;
  swig_callbackOnRtnExercise = callbackOnRtnExercise;
  swig_callbackOnRtnCombAction = callbackOnRtnCombAction;
  swig_callbackOnRtnLock = callbackOnRtnLock;
}

void SwigDirector_CHSTradeSpi::swig_init_callbacks() {
  swig_callbackOnFrontConnected = 0;
  swig_callbackOnFrontDisconnected = 0;
  swig_callbackOnRspUserLogin = 0;
  swig_callbackOnRspUserPasswordUpdate = 0;
  swig_callbackOnRspErrorOrderInsert = 0;
  swig_callbackOnRspOrderAction = 0;
  swig_callbackOnRspErrorExerciseOrderInsert = 0;
  swig_callbackOnRspExerciseOrderAction = 0;
  swig_callbackOnRspErrorLockInsert = 0;
  swig_callbackOnRspForQuoteInsert = 0;
  swig_callbackOnRspErrorCombActionInsert = 0;
  swig_callbackOnRspQueryMaxOrderVolume = 0;
  swig_callbackOnRspQueryLockVolume = 0;
  swig_callbackOnRspQueryExerciseVolume = 0;
  swig_callbackOnRspQryPosition = 0;
  swig_callbackOnRspQryTradingAccount = 0;
  swig_callbackOnRspQryOrder = 0;
  swig_callbackOnRspQryTrade = 0;
  swig_callbackOnRspQryExercise = 0;
  swig_callbackOnRspQryLock = 0;
  swig_callbackOnRspQryCombAction = 0;
  swig_callbackOnRspQryPositionCombineDetail = 0;
  swig_callbackOnRspQryInstrument = 0;
  swig_callbackOnRspQryCoveredShort = 0;
  swig_callbackOnRspQryExerciseAssign = 0;
  swig_callbackOnRspTransfer = 0;
  swig_callbackOnRspQryTransfer = 0;
  swig_callbackOnRspQueryBankBalance = 0;
  swig_callbackOnRspQueryBankAccount = 0;
  swig_callbackOnRspQueryBillContent = 0;
  swig_callbackOnRspBillConfirm = 0;
  swig_callbackOnRspQryMargin = 0;
  swig_callbackOnRspQryCommission = 0;
  swig_callbackOnRspQryPositionDetail = 0;
  swig_callbackOnRspQrySysConfig = 0;
  swig_callbackOnRspQryDepthMarketData = 0;
  swig_callbackOnRtnTrade = 0;
  swig_callbackOnRtnOrder = 0;
  swig_callbackOnRtnExercise = 0;
  swig_callbackOnRtnCombAction = 0;
  swig_callbackOnRtnLock = 0;
}

SwigDirector_CHSTradeApi::SwigDirector_CHSTradeApi() : CHSTradeApi(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_CHSTradeApi::ReleaseApi() {
  if (!swig_callbackReleaseApi) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReleaseApi");
  } else {
    swig_callbackReleaseApi();
  }
}

int SwigDirector_CHSTradeApi::Init(char const *pszLicFile, char const *pszPwd, char const *pszSslFile, char const *pszSslPwd) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpszLicFile = 0 ;
  char * jpszPwd = 0 ;
  char * jpszSslFile = 0 ;
  char * jpszSslPwd = 0 ;
  
  if (!swig_callbackInit__SWIG_0) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::Init");
  } else {
    jpszLicFile = SWIG_csharp_string_callback((const char *)pszLicFile); 
    jpszPwd = SWIG_csharp_string_callback((const char *)pszPwd); 
    jpszSslFile = SWIG_csharp_string_callback((const char *)pszSslFile); 
    jpszSslPwd = SWIG_csharp_string_callback((const char *)pszSslPwd); 
    jresult = (int) swig_callbackInit__SWIG_0(jpszLicFile, jpszPwd, jpszSslFile, jpszSslPwd);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::Join() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackJoin) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::Join");
  } else {
    jresult = (int) swig_callbackJoin();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::RegisterSubModel(char const *pszSubModel) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpszSubModel = 0 ;
  
  if (!swig_callbackRegisterSubModel) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::RegisterSubModel");
  } else {
    jpszSubModel = SWIG_csharp_string_callback((const char *)pszSubModel); 
    jresult = (int) swig_callbackRegisterSubModel(jpszSubModel);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::RegisterFront(char const *pszFrontAddress) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpszFrontAddress = 0 ;
  
  if (!swig_callbackRegisterFront) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::RegisterFront");
  } else {
    jpszFrontAddress = SWIG_csharp_string_callback((const char *)pszFrontAddress); 
    jresult = (int) swig_callbackRegisterFront(jpszFrontAddress);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::RegisterFensServer(char const *pszFensAddress, char const *pszAccountID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jpszFensAddress = 0 ;
  char * jpszAccountID = 0 ;
  
  if (!swig_callbackRegisterFensServer) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::RegisterFensServer");
  } else {
    jpszFensAddress = SWIG_csharp_string_callback((const char *)pszFensAddress); 
    jpszAccountID = SWIG_csharp_string_callback((const char *)pszAccountID); 
    jresult = (int) swig_callbackRegisterFensServer(jpszFensAddress, jpszAccountID);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_CHSTradeApi::RegisterSpi(CHSTradeSpi *pSpi) {
  void * jpSpi = 0 ;
  
  if (!swig_callbackRegisterSpi) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::RegisterSpi");
  } else {
    jpSpi = (void *) pSpi; 
    swig_callbackRegisterSpi(jpSpi);
  }
}

char const *SwigDirector_CHSTradeApi::GetApiErrorMsg(int nErrorCode) {
  char *c_result = 0 ;
  char * jresult = 0 ;
  int jnErrorCode  ;
  
  if (!swig_callbackGetApiErrorMsg) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::GetApiErrorMsg");
  } else {
    jnErrorCode = nErrorCode;
    jresult = (char *) swig_callbackGetApiErrorMsg(jnErrorCode);
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_CHSTradeApi::GetTradingDate() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetTradingDate) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::GetTradingDate");
  } else {
    jresult = (int) swig_callbackGetTradingDate();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqUserLogin(CHSReqUserLoginField *pReqUserLogin, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqUserLogin = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqUserLogin) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqUserLogin");
  } else {
    jpReqUserLogin = (void *) pReqUserLogin; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqUserLogin(jpReqUserLogin, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqUserPasswordUpdate(CHSReqUserPasswordUpdateField *pReqUserPasswordUpdate, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqUserPasswordUpdate = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqUserPasswordUpdate) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqUserPasswordUpdate");
  } else {
    jpReqUserPasswordUpdate = (void *) pReqUserPasswordUpdate; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqUserPasswordUpdate(jpReqUserPasswordUpdate, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqOrderInsert(CHSReqOrderInsertField *pReqOrderInsert, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqOrderInsert = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqOrderInsert) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqOrderInsert");
  } else {
    jpReqOrderInsert = (void *) pReqOrderInsert; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqOrderInsert(jpReqOrderInsert, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqOrderAction(CHSReqOrderActionField *pReqOrderAction, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqOrderAction = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqOrderAction) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqOrderAction");
  } else {
    jpReqOrderAction = (void *) pReqOrderAction; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqOrderAction(jpReqOrderAction, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqExerciseOrderInsert(CHSReqExerciseOrderInsertField *pReqExerciseOrderInsert, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqExerciseOrderInsert = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqExerciseOrderInsert) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqExerciseOrderInsert");
  } else {
    jpReqExerciseOrderInsert = (void *) pReqExerciseOrderInsert; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqExerciseOrderInsert(jpReqExerciseOrderInsert, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqExerciseOrderAction(CHSReqExerciseOrderActionField *pReqExerciseOrderAction, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqExerciseOrderAction = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqExerciseOrderAction) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqExerciseOrderAction");
  } else {
    jpReqExerciseOrderAction = (void *) pReqExerciseOrderAction; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqExerciseOrderAction(jpReqExerciseOrderAction, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqLockInsert(CHSReqLockInsertField *pReqLockInsert, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqLockInsert = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqLockInsert) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqLockInsert");
  } else {
    jpReqLockInsert = (void *) pReqLockInsert; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqLockInsert(jpReqLockInsert, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqForQuoteInsert(CHSReqForQuoteInsertField *pReqForQuoteInsert, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqForQuoteInsert = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqForQuoteInsert) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqForQuoteInsert");
  } else {
    jpReqForQuoteInsert = (void *) pReqForQuoteInsert; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqForQuoteInsert(jpReqForQuoteInsert, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqCombActionInsert(CHSReqCombActionInsertField *pReqCombActionInsert, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqCombActionInsert = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqCombActionInsert) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqCombActionInsert");
  } else {
    jpReqCombActionInsert = (void *) pReqCombActionInsert; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqCombActionInsert(jpReqCombActionInsert, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQueryMaxOrderVolume(CHSReqQueryMaxOrderVolumeField *pReqQueryMaxOrderVolume, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQueryMaxOrderVolume = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQueryMaxOrderVolume) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQueryMaxOrderVolume");
  } else {
    jpReqQueryMaxOrderVolume = (void *) pReqQueryMaxOrderVolume; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQueryMaxOrderVolume(jpReqQueryMaxOrderVolume, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQueryLockVolume(CHSReqQueryLockVolumeField *pReqQueryLockVolume, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQueryLockVolume = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQueryLockVolume) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQueryLockVolume");
  } else {
    jpReqQueryLockVolume = (void *) pReqQueryLockVolume; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQueryLockVolume(jpReqQueryLockVolume, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQueryExerciseVolume(CHSReqQueryExerciseVolumeField *pReqQueryExerciseVolume, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQueryExerciseVolume = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQueryExerciseVolume) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQueryExerciseVolume");
  } else {
    jpReqQueryExerciseVolume = (void *) pReqQueryExerciseVolume; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQueryExerciseVolume(jpReqQueryExerciseVolume, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryPosition(CHSReqQryPositionField *pReqQryPosition, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryPosition = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryPosition) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryPosition");
  } else {
    jpReqQryPosition = (void *) pReqQryPosition; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryPosition(jpReqQryPosition, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryTradingAccount(CHSReqQryTradingAccountField *pReqQryTradingAccount, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryTradingAccount = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryTradingAccount) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryTradingAccount");
  } else {
    jpReqQryTradingAccount = (void *) pReqQryTradingAccount; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryTradingAccount(jpReqQryTradingAccount, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryOrder(CHSReqQryOrderField *pReqQryOrder, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryOrder = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryOrder) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryOrder");
  } else {
    jpReqQryOrder = (void *) pReqQryOrder; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryOrder(jpReqQryOrder, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryTrade(CHSReqQryTradeField *pReqQryTrade, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryTrade = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryTrade) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryTrade");
  } else {
    jpReqQryTrade = (void *) pReqQryTrade; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryTrade(jpReqQryTrade, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryExercise(CHSReqQryExerciseField *pReqQryExercise, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryExercise = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryExercise) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryExercise");
  } else {
    jpReqQryExercise = (void *) pReqQryExercise; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryExercise(jpReqQryExercise, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryLock(CHSReqQryLockField *pReqQryLock, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryLock = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryLock) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryLock");
  } else {
    jpReqQryLock = (void *) pReqQryLock; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryLock(jpReqQryLock, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryCombAction(CHSReqQryCombActionField *pReqQryCombAction, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryCombAction = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryCombAction) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryCombAction");
  } else {
    jpReqQryCombAction = (void *) pReqQryCombAction; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryCombAction(jpReqQryCombAction, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryPositionCombineDetail(CHSReqQryPositionCombineDetailField *pReqQryPositionCombineDetail, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryPositionCombineDetail = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryPositionCombineDetail) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryPositionCombineDetail");
  } else {
    jpReqQryPositionCombineDetail = (void *) pReqQryPositionCombineDetail; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryPositionCombineDetail(jpReqQryPositionCombineDetail, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryInstrument(CHSReqQryInstrumentField *pReqQryInstrument, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryInstrument = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryInstrument) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryInstrument");
  } else {
    jpReqQryInstrument = (void *) pReqQryInstrument; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryInstrument(jpReqQryInstrument, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryCoveredShort(CHSReqQryCoveredShortField *pReqQryCoveredShort, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryCoveredShort = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryCoveredShort) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryCoveredShort");
  } else {
    jpReqQryCoveredShort = (void *) pReqQryCoveredShort; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryCoveredShort(jpReqQryCoveredShort, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryExerciseAssign(CHSReqQryExerciseAssignField *pReqQryExerciseAssign, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryExerciseAssign = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryExerciseAssign) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryExerciseAssign");
  } else {
    jpReqQryExerciseAssign = (void *) pReqQryExerciseAssign; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryExerciseAssign(jpReqQryExerciseAssign, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqTransfer(CHSReqTransferField *pReqTransfer, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqTransfer = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqTransfer) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqTransfer");
  } else {
    jpReqTransfer = (void *) pReqTransfer; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqTransfer(jpReqTransfer, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryTransfer(CHSReqQryTransferField *pReqQryTransfer, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryTransfer = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryTransfer) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryTransfer");
  } else {
    jpReqQryTransfer = (void *) pReqQryTransfer; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryTransfer(jpReqQryTransfer, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQueryBankBalance(CHSReqQueryBankBalanceField *pReqQueryBankBalance, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQueryBankBalance = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQueryBankBalance) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQueryBankBalance");
  } else {
    jpReqQueryBankBalance = (void *) pReqQueryBankBalance; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQueryBankBalance(jpReqQueryBankBalance, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQueryBankAccount(CHSReqQueryBankAccountField *pReqQueryBankAccount, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQueryBankAccount = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQueryBankAccount) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQueryBankAccount");
  } else {
    jpReqQueryBankAccount = (void *) pReqQueryBankAccount; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQueryBankAccount(jpReqQueryBankAccount, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQueryBillContent(CHSReqQueryBillContentField *pReqQueryBillContent, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQueryBillContent = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQueryBillContent) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQueryBillContent");
  } else {
    jpReqQueryBillContent = (void *) pReqQueryBillContent; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQueryBillContent(jpReqQueryBillContent, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqBillConfirm(CHSReqBillConfirmField *pReqBillConfirm, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqBillConfirm = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqBillConfirm) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqBillConfirm");
  } else {
    jpReqBillConfirm = (void *) pReqBillConfirm; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqBillConfirm(jpReqBillConfirm, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryMargin(CHSReqQryMarginField *pReqQryMargin, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryMargin = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryMargin) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryMargin");
  } else {
    jpReqQryMargin = (void *) pReqQryMargin; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryMargin(jpReqQryMargin, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryCommission(CHSReqQryCommissionField *pReqQryCommission, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryCommission = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryCommission) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryCommission");
  } else {
    jpReqQryCommission = (void *) pReqQryCommission; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryCommission(jpReqQryCommission, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryPositionDetail(CHSReqQryPositionDetailField *pReqQryPositionDetail, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryPositionDetail = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryPositionDetail) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryPositionDetail");
  } else {
    jpReqQryPositionDetail = (void *) pReqQryPositionDetail; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryPositionDetail(jpReqQryPositionDetail, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQrySysConfig(CHSReqQrySysConfigField *pReqQrySysConfig, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQrySysConfig = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQrySysConfig) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQrySysConfig");
  } else {
    jpReqQrySysConfig = (void *) pReqQrySysConfig; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQrySysConfig(jpReqQrySysConfig, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_CHSTradeApi::ReqQryDepthMarketData(CHSReqQryDepthMarketDataField *pReqQryDepthMarketData, int nRequestID) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpReqQryDepthMarketData = 0 ;
  int jnRequestID  ;
  
  if (!swig_callbackReqQryDepthMarketData) {
    throw Swig::DirectorPureVirtualException("CHSTradeApi::ReqQryDepthMarketData");
  } else {
    jpReqQryDepthMarketData = (void *) pReqQryDepthMarketData; 
    jnRequestID = nRequestID;
    jresult = (int) swig_callbackReqQryDepthMarketData(jpReqQryDepthMarketData, jnRequestID);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_CHSTradeApi::swig_connect_director(SWIG_Callback0_t callbackReleaseApi, SWIG_Callback1_t callbackInit__SWIG_0, SWIG_Callback2_t callbackInit__SWIG_1, SWIG_Callback3_t callbackInit__SWIG_2, SWIG_Callback4_t callbackInit__SWIG_3, SWIG_Callback5_t callbackJoin, SWIG_Callback6_t callbackRegisterSubModel, SWIG_Callback7_t callbackRegisterFront, SWIG_Callback8_t callbackRegisterFensServer, SWIG_Callback9_t callbackRegisterSpi, SWIG_Callback10_t callbackGetApiErrorMsg, SWIG_Callback11_t callbackGetTradingDate, SWIG_Callback12_t callbackReqUserLogin, SWIG_Callback13_t callbackReqUserPasswordUpdate, SWIG_Callback14_t callbackReqOrderInsert, SWIG_Callback15_t callbackReqOrderAction, SWIG_Callback16_t callbackReqExerciseOrderInsert, SWIG_Callback17_t callbackReqExerciseOrderAction, SWIG_Callback18_t callbackReqLockInsert, SWIG_Callback19_t callbackReqForQuoteInsert, SWIG_Callback20_t callbackReqCombActionInsert, SWIG_Callback21_t callbackReqQueryMaxOrderVolume, SWIG_Callback22_t callbackReqQueryLockVolume, SWIG_Callback23_t callbackReqQueryExerciseVolume, SWIG_Callback24_t callbackReqQryPosition, SWIG_Callback25_t callbackReqQryTradingAccount, SWIG_Callback26_t callbackReqQryOrder, SWIG_Callback27_t callbackReqQryTrade, SWIG_Callback28_t callbackReqQryExercise, SWIG_Callback29_t callbackReqQryLock, SWIG_Callback30_t callbackReqQryCombAction, SWIG_Callback31_t callbackReqQryPositionCombineDetail, SWIG_Callback32_t callbackReqQryInstrument, SWIG_Callback33_t callbackReqQryCoveredShort, SWIG_Callback34_t callbackReqQryExerciseAssign, SWIG_Callback35_t callbackReqTransfer, SWIG_Callback36_t callbackReqQryTransfer, SWIG_Callback37_t callbackReqQueryBankBalance, SWIG_Callback38_t callbackReqQueryBankAccount, SWIG_Callback39_t callbackReqQueryBillContent, SWIG_Callback40_t callbackReqBillConfirm, SWIG_Callback41_t callbackReqQryMargin, SWIG_Callback42_t callbackReqQryCommission, SWIG_Callback43_t callbackReqQryPositionDetail, SWIG_Callback44_t callbackReqQrySysConfig, SWIG_Callback45_t callbackReqQryDepthMarketData) {
  swig_callbackReleaseApi = callbackReleaseApi;
  swig_callbackInit__SWIG_0 = callbackInit__SWIG_0;
  swig_callbackInit__SWIG_1 = callbackInit__SWIG_1;
  swig_callbackInit__SWIG_2 = callbackInit__SWIG_2;
  swig_callbackInit__SWIG_3 = callbackInit__SWIG_3;
  swig_callbackJoin = callbackJoin;
  swig_callbackRegisterSubModel = callbackRegisterSubModel;
  swig_callbackRegisterFront = callbackRegisterFront;
  swig_callbackRegisterFensServer = callbackRegisterFensServer;
  swig_callbackRegisterSpi = callbackRegisterSpi;
  swig_callbackGetApiErrorMsg = callbackGetApiErrorMsg;
  swig_callbackGetTradingDate = callbackGetTradingDate;
  swig_callbackReqUserLogin = callbackReqUserLogin;
  swig_callbackReqUserPasswordUpdate = callbackReqUserPasswordUpdate;
  swig_callbackReqOrderInsert = callbackReqOrderInsert;
  swig_callbackReqOrderAction = callbackReqOrderAction;
  swig_callbackReqExerciseOrderInsert = callbackReqExerciseOrderInsert;
  swig_callbackReqExerciseOrderAction = callbackReqExerciseOrderAction;
  swig_callbackReqLockInsert = callbackReqLockInsert;
  swig_callbackReqForQuoteInsert = callbackReqForQuoteInsert;
  swig_callbackReqCombActionInsert = callbackReqCombActionInsert;
  swig_callbackReqQueryMaxOrderVolume = callbackReqQueryMaxOrderVolume;
  swig_callbackReqQueryLockVolume = callbackReqQueryLockVolume;
  swig_callbackReqQueryExerciseVolume = callbackReqQueryExerciseVolume;
  swig_callbackReqQryPosition = callbackReqQryPosition;
  swig_callbackReqQryTradingAccount = callbackReqQryTradingAccount;
  swig_callbackReqQryOrder = callbackReqQryOrder;
  swig_callbackReqQryTrade = callbackReqQryTrade;
  swig_callbackReqQryExercise = callbackReqQryExercise;
  swig_callbackReqQryLock = callbackReqQryLock;
  swig_callbackReqQryCombAction = callbackReqQryCombAction;
  swig_callbackReqQryPositionCombineDetail = callbackReqQryPositionCombineDetail;
  swig_callbackReqQryInstrument = callbackReqQryInstrument;
  swig_callbackReqQryCoveredShort = callbackReqQryCoveredShort;
  swig_callbackReqQryExerciseAssign = callbackReqQryExerciseAssign;
  swig_callbackReqTransfer = callbackReqTransfer;
  swig_callbackReqQryTransfer = callbackReqQryTransfer;
  swig_callbackReqQueryBankBalance = callbackReqQueryBankBalance;
  swig_callbackReqQueryBankAccount = callbackReqQueryBankAccount;
  swig_callbackReqQueryBillContent = callbackReqQueryBillContent;
  swig_callbackReqBillConfirm = callbackReqBillConfirm;
  swig_callbackReqQryMargin = callbackReqQryMargin;
  swig_callbackReqQryCommission = callbackReqQryCommission;
  swig_callbackReqQryPositionDetail = callbackReqQryPositionDetail;
  swig_callbackReqQrySysConfig = callbackReqQrySysConfig;
  swig_callbackReqQryDepthMarketData = callbackReqQryDepthMarketData;
}

void SwigDirector_CHSTradeApi::swig_init_callbacks() {
  swig_callbackReleaseApi = 0;
  swig_callbackInit__SWIG_0 = 0;
  swig_callbackInit__SWIG_1 = 0;
  swig_callbackInit__SWIG_2 = 0;
  swig_callbackInit__SWIG_3 = 0;
  swig_callbackJoin = 0;
  swig_callbackRegisterSubModel = 0;
  swig_callbackRegisterFront = 0;
  swig_callbackRegisterFensServer = 0;
  swig_callbackRegisterSpi = 0;
  swig_callbackGetApiErrorMsg = 0;
  swig_callbackGetTradingDate = 0;
  swig_callbackReqUserLogin = 0;
  swig_callbackReqUserPasswordUpdate = 0;
  swig_callbackReqOrderInsert = 0;
  swig_callbackReqOrderAction = 0;
  swig_callbackReqExerciseOrderInsert = 0;
  swig_callbackReqExerciseOrderAction = 0;
  swig_callbackReqLockInsert = 0;
  swig_callbackReqForQuoteInsert = 0;
  swig_callbackReqCombActionInsert = 0;
  swig_callbackReqQueryMaxOrderVolume = 0;
  swig_callbackReqQueryLockVolume = 0;
  swig_callbackReqQueryExerciseVolume = 0;
  swig_callbackReqQryPosition = 0;
  swig_callbackReqQryTradingAccount = 0;
  swig_callbackReqQryOrder = 0;
  swig_callbackReqQryTrade = 0;
  swig_callbackReqQryExercise = 0;
  swig_callbackReqQryLock = 0;
  swig_callbackReqQryCombAction = 0;
  swig_callbackReqQryPositionCombineDetail = 0;
  swig_callbackReqQryInstrument = 0;
  swig_callbackReqQryCoveredShort = 0;
  swig_callbackReqQryExerciseAssign = 0;
  swig_callbackReqTransfer = 0;
  swig_callbackReqQryTransfer = 0;
  swig_callbackReqQueryBankBalance = 0;
  swig_callbackReqQueryBankAccount = 0;
  swig_callbackReqQueryBillContent = 0;
  swig_callbackReqBillConfirm = 0;
  swig_callbackReqQryMargin = 0;
  swig_callbackReqQryCommission = 0;
  swig_callbackReqQryPositionDetail = 0;
  swig_callbackReqQrySysConfig = 0;
  swig_callbackReqQryDepthMarketData = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_API_VERSIONSTRING_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("V3.7.1.5");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OT_CallOptions_get___() {
  char jresult ;
  char result;
  
  result = (char)('C');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OT_PutOptions_get___() {
  char jresult ;
  char result;
  
  result = (char)('P');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_SSE_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("1");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_SZSE_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("2");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_CZCE_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("F1");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_DCE_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("F2");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_SHFE_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("F3");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_CFFEX_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("F4");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_EI_INE_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("F5");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_ET_Abandon_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_ET_Exec_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_CNSJC_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("CNSJC");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_PXSJC_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("PXSJC");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_PNSJC_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("PNSJC");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_CXSJC_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("CXSJC");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_KS_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("KS");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_KKS_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("KKS");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_ZBD_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("ZBD");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CSI_ZXJ_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("ZXJ");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_D_Buy_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_D_Sell_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OF_Open_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OF_Close_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OF_Delivery_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OF_CloseToday_get___() {
  char jresult ;
  char result;
  
  result = (char)('4');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CD_Comb_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CD_UnComb_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PT_Right_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PT_Voluntary_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PT_Covered_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_LT_Lock_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_LT_Unlock_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_NotReported_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_ToBeReported_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_Reported_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_ReportedToBeCancel_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_PartsTradedToBeCancel_get___() {
  char jresult ;
  char result;
  
  result = (char)('4');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_CanceledWithPartsTraded_get___() {
  char jresult ;
  char result;
  
  result = (char)('5');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_Canceled_get___() {
  char jresult ;
  char result;
  
  result = (char)('6');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_PartsTraded_get___() {
  char jresult ;
  char result;
  
  result = (char)('7');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_Traded_get___() {
  char jresult ;
  char result;
  
  result = (char)('8');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_Abandoned_get___() {
  char jresult ;
  char result;
  
  result = (char)('9');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_CancelFailed_get___() {
  char jresult ;
  char result;
  
  result = (char)('D');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_Confirmed_get___() {
  char jresult ;
  char result;
  
  result = (char)('V');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OS_ToBeConfirmed_get___() {
  char jresult ;
  char result;
  
  result = (char)('W');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OSRC_Personal_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OSRC_Exchange_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OSRC_Member_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OSRC_Organization_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OSRC_Proprietary_get___() {
  char jresult ;
  char result;
  
  result = (char)('4');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OSRC_MobileServiceProvider_get___() {
  char jresult ;
  char result;
  
  result = (char)('5');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TT_BankToBroker_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TT_BrokerToBank_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TSRC_Broker_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TSRC_Bank_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TSRC_Each_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TSRC_Third_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_NotReported_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Reported_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Success_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Abandoned_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_ReportedToBeCancel_get___() {
  char jresult ;
  char result;
  
  result = (char)('4');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Canceled_get___() {
  char jresult ;
  char result;
  
  result = (char)('5');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_PendingReversal_get___() {
  char jresult ;
  char result;
  
  result = (char)('7');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Reversal_get___() {
  char jresult ;
  char result;
  
  result = (char)('8');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_ToBeReported_get___() {
  char jresult ;
  char result;
  
  result = (char)('A');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Reporting_get___() {
  char jresult ;
  char result;
  
  result = (char)('P');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_Confirmed_get___() {
  char jresult ;
  char result;
  
  result = (char)('Q');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TS_PendingConfirm_get___() {
  char jresult ;
  char result;
  
  result = (char)('x');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_HT_Speculation_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_HT_Hedge_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_HT_Arbitrage_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_HT_MarketMaker_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_HT_Covered_get___() {
  char jresult ;
  char result;
  
  result = (char)('4');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_BCF_NO_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_BCF_YES_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_BCFD_NO_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_BCFD_YES_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_Init_get___() {
  char jresult ;
  char result;
  
  result = (char)('S');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_CallAuction_get___() {
  char jresult ;
  char result;
  
  result = (char)('C');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_Trinding_get___() {
  char jresult ;
  char result;
  
  result = (char)('T');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_Pause_get___() {
  char jresult ;
  char result;
  
  result = (char)('B');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_Close_get___() {
  char jresult ;
  char result;
  
  result = (char)('E');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_ClosingCallAuction_get___() {
  char jresult ;
  char result;
  
  result = (char)('U');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_Fusing_get___() {
  char jresult ;
  char result;
  
  result = (char)('V');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_Halt_get___() {
  char jresult ;
  char result;
  
  result = (char)('P');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_HaltAllDay_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_FuseToCallAuction_get___() {
  char jresult ;
  char result;
  
  result = (char)('M');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_IT_FuseToClose_get___() {
  char jresult ;
  char result;
  
  result = (char)('N');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OR_LimitBidOpen_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OR_LimitSellOpen_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_OR_LimitCoveredOpen_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_MMSA_NO_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_MMSA_YES_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TF_No_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TF_Yes_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_SOF_Normal_get___() {
  char jresult ;
  char result;
  
  result = (char)('0');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_SOF_Swap_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PWDT_Fund_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PWDT_Trade_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Limit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("L");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_LimitFOK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("LFOK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_LimitFAK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("LFAK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_LimitStopLoss_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("LLOS");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_LimitStopProfit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("LPFT");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Market_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("M");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketFOK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MFOK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketFAK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MFAK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketFAKV_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MFAKV");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketStopLoss_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MLOS");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketStopProfit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MPFT");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketToLimit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MTL");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Market5FAK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("M5FAK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Market5ToLimit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("M5TL");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Market1ToLimit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("M1TL");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Market1FAK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("M1FAK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_Market1FOK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("M1FOK");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_CT_MarketSelfToLimit_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MSTL");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_Futures_get___() {
  char jresult ;
  char result;
  
  result = (char)('1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_OptFutu_get___() {
  char jresult ;
  char result;
  
  result = (char)('2');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_Combination_get___() {
  char jresult ;
  char result;
  
  result = (char)('3');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_Spot_get___() {
  char jresult ;
  char result;
  
  result = (char)('4');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_FutuToSpot_get___() {
  char jresult ;
  char result;
  
  result = (char)('5');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_Securities_get___() {
  char jresult ;
  char result;
  
  result = (char)('6');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_PTYPE_OptStock_get___() {
  char jresult ;
  char result;
  
  result = (char)('7');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TERT_RESTART_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("0");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TERT_RESUME_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("1");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_HS_TERT_QUICK_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("2");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspInfoField_ErrorID_set___(void * jarg1, int jarg2) {
  CHSRspInfoField *arg1 = (CHSRspInfoField *) 0 ;
  HSErrorID arg2 ;
  
  arg1 = (CHSRspInfoField *)jarg1; 
  arg2 = (HSErrorID)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspInfoField_ErrorID_get___(void * jarg1) {
  int jresult ;
  CHSRspInfoField *arg1 = (CHSRspInfoField *) 0 ;
  HSErrorID result;
  
  arg1 = (CHSRspInfoField *)jarg1; 
  result = (HSErrorID) ((arg1)->ErrorID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspInfoField_ErrorMsg_set___(void * jarg1, char * jarg2) {
  CHSRspInfoField *arg1 = (CHSRspInfoField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspInfoField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 256-1);
      arg1->ErrorMsg[256-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspInfoField_ErrorMsg_get___(void * jarg1) {
  char * jresult ;
  CHSRspInfoField *arg1 = (CHSRspInfoField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspInfoField *)jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspInfoField___() {
  void * jresult ;
  CHSRspInfoField *result = 0 ;
  
  result = (CHSRspInfoField *)new CHSRspInfoField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspInfoField___(void * jarg1) {
  CHSRspInfoField *arg1 = (CHSRspInfoField *) 0 ;
  
  arg1 = (CHSRspInfoField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_Password_set___(void * jarg1, char * jarg2) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 16-1);
      arg1->Password[16-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_Password_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  result = (char *) ((arg1)->Password);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_UserApplicationType_set___(void * jarg1, char jarg2) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  HSUserApplicationType arg2 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  arg2 = (HSUserApplicationType)jarg2; 
  if (arg1) (arg1)->UserApplicationType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_UserApplicationType_get___(void * jarg1) {
  char jresult ;
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  HSUserApplicationType result;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  result = (HSUserApplicationType) ((arg1)->UserApplicationType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_UserApplicationInfo_set___(void * jarg1, char * jarg2) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UserApplicationInfo, (const char *)arg2, 32-1);
      arg1->UserApplicationInfo[32-1] = 0;
    } else {
      arg1->UserApplicationInfo[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_UserApplicationInfo_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  result = (char *) ((arg1)->UserApplicationInfo);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_MacAddress_set___(void * jarg1, char * jarg2) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->MacAddress, (const char *)arg2, 32-1);
      arg1->MacAddress[32-1] = 0;
    } else {
      arg1->MacAddress[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_MacAddress_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  result = (char *) ((arg1)->MacAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_IPAddress_set___(void * jarg1, char * jarg2) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->IPAddress, (const char *)arg2, 64-1);
      arg1->IPAddress[64-1] = 0;
    } else {
      arg1->IPAddress[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserLoginField_IPAddress_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  result = (char *) ((arg1)->IPAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqUserLoginField___() {
  void * jresult ;
  CHSReqUserLoginField *result = 0 ;
  
  result = (CHSReqUserLoginField *)new CHSReqUserLoginField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqUserLoginField___(void * jarg1) {
  CHSReqUserLoginField *arg1 = (CHSReqUserLoginField *) 0 ;
  
  arg1 = (CHSReqUserLoginField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_BranchID_set___(void * jarg1, int jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSNum arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (HSNum)jarg2; 
  if (arg1) (arg1)->BranchID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_BranchID_get___(void * jarg1) {
  int jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSNum result;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (HSNum) ((arg1)->BranchID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_UserName_set___(void * jarg1, char * jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UserName, (const char *)arg2, 32-1);
      arg1->UserName[32-1] = 0;
    } else {
      arg1->UserName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_UserName_get___(void * jarg1) {
  char * jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (char *) ((arg1)->UserName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_TradingDay_set___(void * jarg1, int jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->TradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_TradingDay_get___(void * jarg1) {
  int jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (HSDate) ((arg1)->TradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_PreTradingDay_set___(void * jarg1, int jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->PreTradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_PreTradingDay_get___(void * jarg1) {
  int jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (HSDate) ((arg1)->PreTradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_BillConfirmFlag_set___(void * jarg1, char jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSBillConfirmFlag arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (HSBillConfirmFlag)jarg2; 
  if (arg1) (arg1)->BillConfirmFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_BillConfirmFlag_get___(void * jarg1) {
  char jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSBillConfirmFlag result;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (HSBillConfirmFlag) ((arg1)->BillConfirmFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_SessionID_set___(void * jarg1, int jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_UserApplicationType_set___(void * jarg1, char jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSUserApplicationType arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (HSUserApplicationType)jarg2; 
  if (arg1) (arg1)->UserApplicationType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_UserApplicationType_get___(void * jarg1) {
  char jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  HSUserApplicationType result;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (HSUserApplicationType) ((arg1)->UserApplicationType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_UserApplicationInfo_set___(void * jarg1, char * jarg2) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UserApplicationInfo, (const char *)arg2, 32-1);
      arg1->UserApplicationInfo[32-1] = 0;
    } else {
      arg1->UserApplicationInfo[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspUserLoginField_UserApplicationInfo_get___(void * jarg1) {
  char * jresult ;
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  result = (char *) ((arg1)->UserApplicationInfo);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspUserLoginField___() {
  void * jresult ;
  CHSRspUserLoginField *result = 0 ;
  
  result = (CHSRspUserLoginField *)new CHSRspUserLoginField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspUserLoginField___(void * jarg1) {
  CHSRspUserLoginField *arg1 = (CHSRspUserLoginField *) 0 ;
  
  arg1 = (CHSRspUserLoginField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserPasswordUpdateField_PasswordType_set___(void * jarg1, char jarg2) {
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  HSPasswordType arg2 ;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  arg2 = (HSPasswordType)jarg2; 
  if (arg1) (arg1)->PasswordType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserPasswordUpdateField_PasswordType_get___(void * jarg1) {
  char jresult ;
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  HSPasswordType result;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  result = (HSPasswordType) ((arg1)->PasswordType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserPasswordUpdateField_Password_set___(void * jarg1, char * jarg2) {
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 16-1);
      arg1->Password[16-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserPasswordUpdateField_Password_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  result = (char *) ((arg1)->Password);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserPasswordUpdateField_NewPassword_set___(void * jarg1, char * jarg2) {
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->NewPassword, (const char *)arg2, 16-1);
      arg1->NewPassword[16-1] = 0;
    } else {
      arg1->NewPassword[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqUserPasswordUpdateField_NewPassword_get___(void * jarg1) {
  char * jresult ;
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  result = (char *) ((arg1)->NewPassword);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqUserPasswordUpdateField___() {
  void * jresult ;
  CHSReqUserPasswordUpdateField *result = 0 ;
  
  result = (CHSReqUserPasswordUpdateField *)new CHSReqUserPasswordUpdateField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqUserPasswordUpdateField___(void * jarg1) {
  CHSReqUserPasswordUpdateField *arg1 = (CHSReqUserPasswordUpdateField *) 0 ;
  
  arg1 = (CHSReqUserPasswordUpdateField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspUserPasswordUpdateField___() {
  void * jresult ;
  CHSRspUserPasswordUpdateField *result = 0 ;
  
  result = (CHSRspUserPasswordUpdateField *)new CHSRspUserPasswordUpdateField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspUserPasswordUpdateField___(void * jarg1) {
  CHSRspUserPasswordUpdateField *arg1 = (CHSRspUserPasswordUpdateField *) 0 ;
  
  arg1 = (CHSRspUserPasswordUpdateField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderRef_set___(void * jarg1, char * jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 32-1);
      arg1->OrderRef[32-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderRef_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->OrderRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_Direction_set___(void * jarg1, char jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OffsetFlag_set___(void * jarg1, char jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSOffsetFlag arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSOffsetFlag)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OffsetFlag_get___(void * jarg1) {
  char jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSOffsetFlag result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSOffsetFlag) ((arg1)->OffsetFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderPrice_set___(void * jarg1, double jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->OrderPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderPrice_get___(void * jarg1) {
  double jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSPrice) ((arg1)->OrderPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderCommand_set___(void * jarg1, char * jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderCommand, (const char *)arg2, 8-1);
      arg1->OrderCommand[8-1] = 0;
    } else {
      arg1->OrderCommand[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_OrderCommand_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->OrderCommand);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_MinVolume_set___(void * jarg1, double jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_MinVolume_get___(void * jarg1) {
  double jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->MinVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_SpringPrice_set___(void * jarg1, double jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->SpringPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_SpringPrice_get___(void * jarg1) {
  double jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSPrice) ((arg1)->SpringPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_SwapOrderFlag_set___(void * jarg1, char jarg2) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSSwapOrderFlag arg2 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  arg2 = (HSSwapOrderFlag)jarg2; 
  if (arg1) (arg1)->SwapOrderFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderInsertField_SwapOrderFlag_get___(void * jarg1) {
  char jresult ;
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  HSSwapOrderFlag result;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  result = (HSSwapOrderFlag) ((arg1)->SwapOrderFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqOrderInsertField___() {
  void * jresult ;
  CHSReqOrderInsertField *result = 0 ;
  
  result = (CHSReqOrderInsertField *)new CHSReqOrderInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqOrderInsertField___(void * jarg1) {
  CHSReqOrderInsertField *arg1 = (CHSReqOrderInsertField *) 0 ;
  
  arg1 = (CHSReqOrderInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderSysID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 32-1);
      arg1->OrderSysID[32-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_BrokerOrderID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerOrderID, (const char *)arg2, 32-1);
      arg1->BrokerOrderID[32-1] = 0;
    } else {
      arg1->BrokerOrderID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_BrokerOrderID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->BrokerOrderID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_SessionID_set___(void * jarg1, int jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderRef_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 32-1);
      arg1->OrderRef[32-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderRef_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->OrderRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_Direction_set___(void * jarg1, char jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OffsetFlag_set___(void * jarg1, char jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSOffsetFlag arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSOffsetFlag)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OffsetFlag_get___(void * jarg1) {
  char jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSOffsetFlag result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSOffsetFlag) ((arg1)->OffsetFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderPrice_set___(void * jarg1, double jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->OrderPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderPrice_get___(void * jarg1) {
  double jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSPrice) ((arg1)->OrderPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderCommand_set___(void * jarg1, char * jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderCommand, (const char *)arg2, 8-1);
      arg1->OrderCommand[8-1] = 0;
    } else {
      arg1->OrderCommand[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_OrderCommand_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->OrderCommand);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSTime result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_MinVolume_set___(void * jarg1, double jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_MinVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->MinVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_SpringPrice_set___(void * jarg1, double jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->SpringPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_SpringPrice_get___(void * jarg1) {
  double jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSPrice) ((arg1)->SpringPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_SwapOrderFlag_set___(void * jarg1, char jarg2) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSSwapOrderFlag arg2 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  arg2 = (HSSwapOrderFlag)jarg2; 
  if (arg1) (arg1)->SwapOrderFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderInsertField_SwapOrderFlag_get___(void * jarg1) {
  char jresult ;
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  HSSwapOrderFlag result;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  result = (HSSwapOrderFlag) ((arg1)->SwapOrderFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspOrderInsertField___() {
  void * jresult ;
  CHSRspOrderInsertField *result = 0 ;
  
  result = (CHSRspOrderInsertField *)new CHSRspOrderInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspOrderInsertField___(void * jarg1) {
  CHSRspOrderInsertField *arg1 = (CHSRspOrderInsertField *) 0 ;
  
  arg1 = (CHSRspOrderInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_OrderSysID_set___(void * jarg1, char * jarg2) {
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 32-1);
      arg1->OrderSysID[32-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_OrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_SessionID_set___(void * jarg1, int jarg2) {
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_OrderRef_set___(void * jarg1, char * jarg2) {
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 32-1);
      arg1->OrderRef[32-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqOrderActionField_OrderRef_get___(void * jarg1) {
  char * jresult ;
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  result = (char *) ((arg1)->OrderRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqOrderActionField___() {
  void * jresult ;
  CHSReqOrderActionField *result = 0 ;
  
  result = (CHSReqOrderActionField *)new CHSReqOrderActionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqOrderActionField___(void * jarg1) {
  CHSReqOrderActionField *arg1 = (CHSReqOrderActionField *) 0 ;
  
  arg1 = (CHSReqOrderActionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_OrderSysID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 32-1);
      arg1->OrderSysID[32-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_OrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_SessionID_set___(void * jarg1, int jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_OrderRef_set___(void * jarg1, char * jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 32-1);
      arg1->OrderRef[32-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_OrderRef_get___(void * jarg1) {
  char * jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (char *) ((arg1)->OrderRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspOrderActionField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  HSTime result;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspOrderActionField___() {
  void * jresult ;
  CHSRspOrderActionField *result = 0 ;
  
  result = (CHSRspOrderActionField *)new CHSRspOrderActionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspOrderActionField___(void * jarg1) {
  CHSRspOrderActionField *arg1 = (CHSRspOrderActionField *) 0 ;
  
  arg1 = (CHSRspOrderActionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_ExerciseRef_set___(void * jarg1, char * jarg2) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseRef, (const char *)arg2, 32-1);
      arg1->ExerciseRef[32-1] = 0;
    } else {
      arg1->ExerciseRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_ExerciseRef_get___(void * jarg1) {
  char * jresult ;
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExerciseRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_ExerciseType_set___(void * jarg1, char jarg2) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  HSExerciseType arg2 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  arg2 = (HSExerciseType)jarg2; 
  if (arg1) (arg1)->ExerciseType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_ExerciseType_get___(void * jarg1) {
  char jresult ;
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  HSExerciseType result;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  result = (HSExerciseType) ((arg1)->ExerciseType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderInsertField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqExerciseOrderInsertField___() {
  void * jresult ;
  CHSReqExerciseOrderInsertField *result = 0 ;
  
  result = (CHSReqExerciseOrderInsertField *)new CHSReqExerciseOrderInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqExerciseOrderInsertField___(void * jarg1) {
  CHSReqExerciseOrderInsertField *arg1 = (CHSReqExerciseOrderInsertField *) 0 ;
  
  arg1 = (CHSReqExerciseOrderInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_SessionID_set___(void * jarg1, int jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExerciseOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseOrderSysID, (const char *)arg2, 32-1);
      arg1->ExerciseOrderSysID[32-1] = 0;
    } else {
      arg1->ExerciseOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExerciseOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExerciseOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExerciseRef_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseRef, (const char *)arg2, 32-1);
      arg1->ExerciseRef[32-1] = 0;
    } else {
      arg1->ExerciseRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExerciseRef_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExerciseRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExerciseType_set___(void * jarg1, char jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSExerciseType arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (HSExerciseType)jarg2; 
  if (arg1) (arg1)->ExerciseType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_ExerciseType_get___(void * jarg1) {
  char jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSExerciseType result;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (HSExerciseType) ((arg1)->ExerciseType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderInsertField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  HSTime result;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspExerciseOrderInsertField___() {
  void * jresult ;
  CHSRspExerciseOrderInsertField *result = 0 ;
  
  result = (CHSRspExerciseOrderInsertField *)new CHSRspExerciseOrderInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspExerciseOrderInsertField___(void * jarg1) {
  CHSRspExerciseOrderInsertField *arg1 = (CHSRspExerciseOrderInsertField *) 0 ;
  
  arg1 = (CHSRspExerciseOrderInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_ExerciseOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseOrderSysID, (const char *)arg2, 32-1);
      arg1->ExerciseOrderSysID[32-1] = 0;
    } else {
      arg1->ExerciseOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_ExerciseOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExerciseOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_ExerciseRef_set___(void * jarg1, char * jarg2) {
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseRef, (const char *)arg2, 32-1);
      arg1->ExerciseRef[32-1] = 0;
    } else {
      arg1->ExerciseRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_ExerciseRef_get___(void * jarg1) {
  char * jresult ;
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExerciseRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_SessionID_set___(void * jarg1, int jarg2) {
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqExerciseOrderActionField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqExerciseOrderActionField___() {
  void * jresult ;
  CHSReqExerciseOrderActionField *result = 0 ;
  
  result = (CHSReqExerciseOrderActionField *)new CHSReqExerciseOrderActionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqExerciseOrderActionField___(void * jarg1) {
  CHSReqExerciseOrderActionField *arg1 = (CHSReqExerciseOrderActionField *) 0 ;
  
  arg1 = (CHSReqExerciseOrderActionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_ExerciseOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseOrderSysID, (const char *)arg2, 32-1);
      arg1->ExerciseOrderSysID[32-1] = 0;
    } else {
      arg1->ExerciseOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_ExerciseOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExerciseOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_ExerciseRef_set___(void * jarg1, char * jarg2) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseRef, (const char *)arg2, 32-1);
      arg1->ExerciseRef[32-1] = 0;
    } else {
      arg1->ExerciseRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_ExerciseRef_get___(void * jarg1) {
  char * jresult ;
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  result = (char *) ((arg1)->ExerciseRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_SessionID_set___(void * jarg1, int jarg2) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspExerciseOrderActionField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspExerciseOrderActionField___() {
  void * jresult ;
  CHSRspExerciseOrderActionField *result = 0 ;
  
  result = (CHSRspExerciseOrderActionField *)new CHSRspExerciseOrderActionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspExerciseOrderActionField___(void * jarg1) {
  CHSRspExerciseOrderActionField *arg1 = (CHSRspExerciseOrderActionField *) 0 ;
  
  arg1 = (CHSRspExerciseOrderActionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_LockType_set___(void * jarg1, char jarg2) {
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  HSLockType arg2 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  arg2 = (HSLockType)jarg2; 
  if (arg1) (arg1)->LockType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_LockType_get___(void * jarg1) {
  char jresult ;
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  HSLockType result;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  result = (HSLockType) ((arg1)->LockType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqLockInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqLockInsertField___() {
  void * jresult ;
  CHSReqLockInsertField *result = 0 ;
  
  result = (CHSReqLockInsertField *)new CHSReqLockInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqLockInsertField___(void * jarg1) {
  CHSReqLockInsertField *arg1 = (CHSReqLockInsertField *) 0 ;
  
  arg1 = (CHSReqLockInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_LockOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LockOrderSysID, (const char *)arg2, 32-1);
      arg1->LockOrderSysID[32-1] = 0;
    } else {
      arg1->LockOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_LockOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (char *) ((arg1)->LockOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_LockType_set___(void * jarg1, char jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSLockType arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (HSLockType)jarg2; 
  if (arg1) (arg1)->LockType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_LockType_get___(void * jarg1) {
  char jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSLockType result;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (HSLockType) ((arg1)->LockType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_UnderlyingAccountID_set___(void * jarg1, char * jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingAccountID, (const char *)arg2, 18-1);
      arg1->UnderlyingAccountID[18-1] = 0;
    } else {
      arg1->UnderlyingAccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_UnderlyingAccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingAccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspLockInsertField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  HSTime result;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspLockInsertField___() {
  void * jresult ;
  CHSRspLockInsertField *result = 0 ;
  
  result = (CHSRspLockInsertField *)new CHSRspLockInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspLockInsertField___(void * jarg1) {
  CHSRspLockInsertField *arg1 = (CHSRspLockInsertField *) 0 ;
  
  arg1 = (CHSRspLockInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqForQuoteInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqForQuoteInsertField *arg1 = (CHSReqForQuoteInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqForQuoteInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqForQuoteInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqForQuoteInsertField *arg1 = (CHSReqForQuoteInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqForQuoteInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqForQuoteInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqForQuoteInsertField *arg1 = (CHSReqForQuoteInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqForQuoteInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqForQuoteInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqForQuoteInsertField *arg1 = (CHSReqForQuoteInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqForQuoteInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqForQuoteInsertField___() {
  void * jresult ;
  CHSReqForQuoteInsertField *result = 0 ;
  
  result = (CHSReqForQuoteInsertField *)new CHSReqForQuoteInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqForQuoteInsertField___(void * jarg1) {
  CHSReqForQuoteInsertField *arg1 = (CHSReqForQuoteInsertField *) 0 ;
  
  arg1 = (CHSReqForQuoteInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspForQuoteInsertField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspForQuoteInsertField___() {
  void * jresult ;
  CHSRspForQuoteInsertField *result = 0 ;
  
  result = (CHSRspForQuoteInsertField *)new CHSRspForQuoteInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspForQuoteInsertField___(void * jarg1) {
  CHSRspForQuoteInsertField *arg1 = (CHSRspForQuoteInsertField *) 0 ;
  
  arg1 = (CHSRspForQuoteInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_CombStrategyID_set___(void * jarg1, char * jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombStrategyID, (const char *)arg2, 8-1);
      arg1->CombStrategyID[8-1] = 0;
    } else {
      arg1->CombStrategyID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_CombStrategyID_get___(void * jarg1) {
  char * jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->CombStrategyID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_CombPositionID_set___(void * jarg1, char * jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombPositionID, (const char *)arg2, 32-1);
      arg1->CombPositionID[32-1] = 0;
    } else {
      arg1->CombPositionID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_CombPositionID_get___(void * jarg1) {
  char * jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->CombPositionID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_CombDirection_set___(void * jarg1, char jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  HSCombDirection arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (HSCombDirection)jarg2; 
  if (arg1) (arg1)->CombDirection = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_CombDirection_get___(void * jarg1) {
  char jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  HSCombDirection result;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (HSCombDirection) ((arg1)->CombDirection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqCombActionInsertField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqCombActionInsertField___() {
  void * jresult ;
  CHSReqCombActionInsertField *result = 0 ;
  
  result = (CHSReqCombActionInsertField *)new CHSReqCombActionInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqCombActionInsertField___(void * jarg1) {
  CHSReqCombActionInsertField *arg1 = (CHSReqCombActionInsertField *) 0 ;
  
  arg1 = (CHSReqCombActionInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombOrderSysID, (const char *)arg2, 32-1);
      arg1->CombOrderSysID[32-1] = 0;
    } else {
      arg1->CombOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->CombOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombStrategyID_set___(void * jarg1, char * jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombStrategyID, (const char *)arg2, 8-1);
      arg1->CombStrategyID[8-1] = 0;
    } else {
      arg1->CombStrategyID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombStrategyID_get___(void * jarg1) {
  char * jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->CombStrategyID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombPositionID_set___(void * jarg1, char * jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombPositionID, (const char *)arg2, 32-1);
      arg1->CombPositionID[32-1] = 0;
    } else {
      arg1->CombPositionID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombPositionID_get___(void * jarg1) {
  char * jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (char *) ((arg1)->CombPositionID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombDirection_set___(void * jarg1, char jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSCombDirection arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (HSCombDirection)jarg2; 
  if (arg1) (arg1)->CombDirection = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_CombDirection_get___(void * jarg1) {
  char jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSCombDirection result;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (HSCombDirection) ((arg1)->CombDirection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspCombActionInsertField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  HSTime result;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspCombActionInsertField___() {
  void * jresult ;
  CHSRspCombActionInsertField *result = 0 ;
  
  result = (CHSRspCombActionInsertField *)new CHSRspCombActionInsertField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspCombActionInsertField___(void * jarg1) {
  CHSRspCombActionInsertField *arg1 = (CHSRspCombActionInsertField *) 0 ;
  
  arg1 = (CHSRspCombActionInsertField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_OrderCommand_set___(void * jarg1, char * jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderCommand, (const char *)arg2, 8-1);
      arg1->OrderCommand[8-1] = 0;
    } else {
      arg1->OrderCommand[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_OrderCommand_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (char *) ((arg1)->OrderCommand);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_Direction_set___(void * jarg1, char jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_OffsetFlag_set___(void * jarg1, char jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSOffsetFlag arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (HSOffsetFlag)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_OffsetFlag_get___(void * jarg1) {
  char jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSOffsetFlag result;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (HSOffsetFlag) ((arg1)->OffsetFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_OrderPrice_set___(void * jarg1, double jarg2) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->OrderPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryMaxOrderVolumeField_OrderPrice_get___(void * jarg1) {
  double jresult ;
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  result = (HSPrice) ((arg1)->OrderPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQueryMaxOrderVolumeField___() {
  void * jresult ;
  CHSReqQueryMaxOrderVolumeField *result = 0 ;
  
  result = (CHSReqQueryMaxOrderVolumeField *)new CHSReqQueryMaxOrderVolumeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQueryMaxOrderVolumeField___(void * jarg1) {
  CHSReqQueryMaxOrderVolumeField *arg1 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  
  arg1 = (CHSReqQueryMaxOrderVolumeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryMaxOrderVolumeField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryMaxOrderVolumeField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryMaxOrderVolumeField_MaxOrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MaxOrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryMaxOrderVolumeField_MaxOrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  result = (HSVolume) ((arg1)->MaxOrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryMaxOrderVolumeField_MaxOrderVolumeUnit_set___(void * jarg1, double jarg2) {
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MaxOrderVolumeUnit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryMaxOrderVolumeField_MaxOrderVolumeUnit_get___(void * jarg1) {
  double jresult ;
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  result = (HSVolume) ((arg1)->MaxOrderVolumeUnit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQueryMaxOrderVolumeField___() {
  void * jresult ;
  CHSRspQueryMaxOrderVolumeField *result = 0 ;
  
  result = (CHSRspQueryMaxOrderVolumeField *)new CHSRspQueryMaxOrderVolumeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQueryMaxOrderVolumeField___(void * jarg1) {
  CHSRspQueryMaxOrderVolumeField *arg1 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  
  arg1 = (CHSRspQueryMaxOrderVolumeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryLockVolumeField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryLockVolumeField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryLockVolumeField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryLockVolumeField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryLockVolumeField_LockType_set___(void * jarg1, char jarg2) {
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  HSLockType arg2 ;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  arg2 = (HSLockType)jarg2; 
  if (arg1) (arg1)->LockType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryLockVolumeField_LockType_get___(void * jarg1) {
  char jresult ;
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  HSLockType result;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  result = (HSLockType) ((arg1)->LockType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQueryLockVolumeField___() {
  void * jresult ;
  CHSReqQueryLockVolumeField *result = 0 ;
  
  result = (CHSReqQueryLockVolumeField *)new CHSReqQueryLockVolumeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQueryLockVolumeField___(void * jarg1) {
  CHSReqQueryLockVolumeField *arg1 = (CHSReqQueryLockVolumeField *) 0 ;
  
  arg1 = (CHSReqQueryLockVolumeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_LockType_set___(void * jarg1, char jarg2) {
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  HSLockType arg2 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  arg2 = (HSLockType)jarg2; 
  if (arg1) (arg1)->LockType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_LockType_get___(void * jarg1) {
  char jresult ;
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  HSLockType result;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  result = (HSLockType) ((arg1)->LockType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_AvailablePositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AvailablePositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryLockVolumeField_AvailablePositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  result = (HSVolume) ((arg1)->AvailablePositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQueryLockVolumeField___() {
  void * jresult ;
  CHSRspQueryLockVolumeField *result = 0 ;
  
  result = (CHSRspQueryLockVolumeField *)new CHSRspQueryLockVolumeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQueryLockVolumeField___(void * jarg1) {
  CHSRspQueryLockVolumeField *arg1 = (CHSRspQueryLockVolumeField *) 0 ;
  
  arg1 = (CHSRspQueryLockVolumeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryExerciseVolumeField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryExerciseVolumeField *arg1 = (CHSReqQueryExerciseVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryExerciseVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryExerciseVolumeField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryExerciseVolumeField *arg1 = (CHSReqQueryExerciseVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryExerciseVolumeField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryExerciseVolumeField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryExerciseVolumeField *arg1 = (CHSReqQueryExerciseVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryExerciseVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryExerciseVolumeField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryExerciseVolumeField *arg1 = (CHSReqQueryExerciseVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryExerciseVolumeField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQueryExerciseVolumeField___() {
  void * jresult ;
  CHSReqQueryExerciseVolumeField *result = 0 ;
  
  result = (CHSReqQueryExerciseVolumeField *)new CHSReqQueryExerciseVolumeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQueryExerciseVolumeField___(void * jarg1) {
  CHSReqQueryExerciseVolumeField *arg1 = (CHSReqQueryExerciseVolumeField *) 0 ;
  
  arg1 = (CHSReqQueryExerciseVolumeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryExerciseVolumeField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryExerciseVolumeField *arg1 = (CHSRspQueryExerciseVolumeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryExerciseVolumeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryExerciseVolumeField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryExerciseVolumeField *arg1 = (CHSRspQueryExerciseVolumeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryExerciseVolumeField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryExerciseVolumeField_MaxOrderVolumeUnit_set___(void * jarg1, double jarg2) {
  CHSRspQueryExerciseVolumeField *arg1 = (CHSRspQueryExerciseVolumeField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQueryExerciseVolumeField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MaxOrderVolumeUnit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryExerciseVolumeField_MaxOrderVolumeUnit_get___(void * jarg1) {
  double jresult ;
  CHSRspQueryExerciseVolumeField *arg1 = (CHSRspQueryExerciseVolumeField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQueryExerciseVolumeField *)jarg1; 
  result = (HSVolume) ((arg1)->MaxOrderVolumeUnit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQueryExerciseVolumeField___() {
  void * jresult ;
  CHSRspQueryExerciseVolumeField *result = 0 ;
  
  result = (CHSRspQueryExerciseVolumeField *)new CHSRspQueryExerciseVolumeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQueryExerciseVolumeField___(void * jarg1) {
  CHSRspQueryExerciseVolumeField *arg1 = (CHSRspQueryExerciseVolumeField *) 0 ;
  
  arg1 = (CHSRspQueryExerciseVolumeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryPositionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryPositionField *arg1 = (CHSReqQryPositionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryPositionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryPositionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryPositionField *arg1 = (CHSReqQryPositionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryPositionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryPositionField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryPositionField *arg1 = (CHSReqQryPositionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryPositionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryPositionField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryPositionField *arg1 = (CHSReqQryPositionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryPositionField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryPositionField___() {
  void * jresult ;
  CHSReqQryPositionField *result = 0 ;
  
  result = (CHSReqQryPositionField *)new CHSReqQryPositionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryPositionField___(void * jarg1) {
  CHSReqQryPositionField *arg1 = (CHSReqQryPositionField *) 0 ;
  
  arg1 = (CHSReqQryPositionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_Direction_set___(void * jarg1, char jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_YdPositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->YdPositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_YdPositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->YdPositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->PositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->PositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_TodayPositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TodayPositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_TodayPositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->TodayPositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_AvailablePositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AvailablePositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_AvailablePositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->AvailablePositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_TodayAvailablePositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TodayAvailablePositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_TodayAvailablePositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->TodayAvailablePositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_Premium_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Premium = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_Premium_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->Premium);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_Commission_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_Commission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->Commission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->FrozenVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->FrozenVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CombVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CombVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CombVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->CombVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CombFrozenVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CombFrozenVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CombFrozenVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->CombFrozenVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_ExerciseFrozenVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->ExerciseFrozenVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_ExerciseFrozenVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->ExerciseFrozenVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenPremium_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenPremium = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenPremium_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenPremium);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_FrozenCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_OpenVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OpenVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_OpenVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->OpenVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CloseVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSVolume) ((arg1)->CloseVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_OpenBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->OpenBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_OpenBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->OpenBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->CloseBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->CloseBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionAveragePrice_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->PositionAveragePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionAveragePrice_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSPrice) ((arg1)->PositionAveragePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionCost_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionCost = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionCost_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionProfit_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionProfit_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionProfit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseProfit_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseProfit_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->CloseProfit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionAveragePriceByDate_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionAveragePriceByDate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionAveragePriceByDate_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionAveragePriceByDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionProfitByDate_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionProfitByDate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_PositionProfitByDate_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionProfitByDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseProfitByDate_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->CloseProfitByDate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_CloseProfitByDate_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->CloseProfitByDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_OptionsMarketValue_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->OptionsMarketValue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_OptionsMarketValue_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (HSBalance) ((arg1)->OptionsMarketValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryPositionField___() {
  void * jresult ;
  CHSRspQryPositionField *result = 0 ;
  
  result = (CHSRspQryPositionField *)new CHSRspQryPositionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryPositionField___(void * jarg1) {
  CHSRspQryPositionField *arg1 = (CHSRspQryPositionField *) 0 ;
  
  arg1 = (CHSRspQryPositionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryTradingAccountField___() {
  void * jresult ;
  CHSReqQryTradingAccountField *result = 0 ;
  
  result = (CHSReqQryTradingAccountField *)new CHSReqQryTradingAccountField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryTradingAccountField___(void * jarg1) {
  CHSReqQryTradingAccountField *arg1 = (CHSReqQryTradingAccountField *) 0 ;
  
  arg1 = (CHSReqQryTradingAccountField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_YdBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->YdBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_YdBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->YdBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_YdPositionMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->YdPositionMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_YdPositionMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->YdPositionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_YdFundEquity_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->YdFundEquity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_YdFundEquity_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->YdFundEquity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FundEquity_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FundEquity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FundEquity_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->FundEquity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_OptionsMarketValue_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->OptionsMarketValue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_OptionsMarketValue_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->OptionsMarketValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Equity_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Equity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Equity_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->Equity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_AvailableBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->AvailableBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_AvailableBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->AvailableBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_WithdrawBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->WithdrawBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_WithdrawBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->WithdrawBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Margin_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Margin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Margin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->Margin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_RiskDegree_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSRiskDegree arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSRiskDegree)jarg2; 
  if (arg1) (arg1)->RiskDegree = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_RiskDegree_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSRiskDegree result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSRiskDegree) ((arg1)->RiskDegree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Premium_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Premium = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Premium_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->Premium);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenPremium_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenPremium = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenPremium_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenPremium);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Commission_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Commission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->Commission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_CloseProfit_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_CloseProfit_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->CloseProfit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_PositionProfit_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_PositionProfit_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionProfit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_CloseProfitByDate_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->CloseProfitByDate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_CloseProfitByDate_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->CloseProfitByDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_PositionProfitByDate_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionProfitByDate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_PositionProfitByDate_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionProfitByDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Deposit_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Deposit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Deposit_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->Deposit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Withdraw_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->Withdraw = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_Withdraw_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->Withdraw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FundMortgage_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FundMortgage = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FundMortgage_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->FundMortgage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_WarrantMortgage_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->WarrantMortgage = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_WarrantMortgage_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->WarrantMortgage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->FrozenBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_FrozenBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->FrozenBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_UnFrozenBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->UnFrozenBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTradingAccountField_UnFrozenBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  result = (HSBalance) ((arg1)->UnFrozenBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryTradingAccountField___() {
  void * jresult ;
  CHSRspQryTradingAccountField *result = 0 ;
  
  result = (CHSRspQryTradingAccountField *)new CHSRspQryTradingAccountField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryTradingAccountField___(void * jarg1) {
  CHSRspQryTradingAccountField *arg1 = (CHSRspQryTradingAccountField *) 0 ;
  
  arg1 = (CHSRspQryTradingAccountField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryOrderField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryOrderField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryOrderField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryOrderField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryOrderField_OrderSysID_set___(void * jarg1, char * jarg2) {
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 32-1);
      arg1->OrderSysID[32-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryOrderField_OrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryOrderField___() {
  void * jresult ;
  CHSReqQryOrderField *result = 0 ;
  
  result = (CHSReqQryOrderField *)new CHSReqQryOrderField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryOrderField___(void * jarg1) {
  CHSReqQryOrderField *arg1 = (CHSReqQryOrderField *) 0 ;
  
  arg1 = (CHSReqQryOrderField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderSysID_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 32-1);
      arg1->OrderSysID[32-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_BrokerOrderID_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerOrderID, (const char *)arg2, 32-1);
      arg1->BrokerOrderID[32-1] = 0;
    } else {
      arg1->BrokerOrderID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_BrokerOrderID_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->BrokerOrderID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_SessionID_set___(void * jarg1, int jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderRef_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 32-1);
      arg1->OrderRef[32-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderRef_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->OrderRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_Direction_set___(void * jarg1, char jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OffsetFlag_set___(void * jarg1, char jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSOffsetFlag arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSOffsetFlag)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OffsetFlag_get___(void * jarg1) {
  char jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSOffsetFlag result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSOffsetFlag) ((arg1)->OffsetFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderPrice_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->OrderPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderPrice_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSPrice) ((arg1)->OrderPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_TradeVolume_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TradeVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_TradeVolume_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSVolume) ((arg1)->TradeVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_CancelVolume_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CancelVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_CancelVolume_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSVolume) ((arg1)->CancelVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_TradePrice_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->TradePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_TradePrice_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSPrice) ((arg1)->TradePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_TradingDay_set___(void * jarg1, int jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->TradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_TradingDay_get___(void * jarg1) {
  int jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSDate result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSDate) ((arg1)->TradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_InsertDate_set___(void * jarg1, int jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->InsertDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_InsertDate_get___(void * jarg1) {
  int jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSDate result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSDate) ((arg1)->InsertDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSTime result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ReportTime_set___(void * jarg1, int jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->ReportTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ReportTime_get___(void * jarg1) {
  int jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSTime result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSTime) ((arg1)->ReportTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderCommand_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderCommand, (const char *)arg2, 8-1);
      arg1->OrderCommand[8-1] = 0;
    } else {
      arg1->OrderCommand[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderCommand_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->OrderCommand);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_MinVolume_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_MinVolume_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSVolume) ((arg1)->MinVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_SpringPrice_set___(void * jarg1, double jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->SpringPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_SpringPrice_get___(void * jarg1) {
  double jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSPrice) ((arg1)->SpringPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_SwapOrderFlag_set___(void * jarg1, char jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSSwapOrderFlag arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSSwapOrderFlag)jarg2; 
  if (arg1) (arg1)->SwapOrderFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_SwapOrderFlag_get___(void * jarg1) {
  char jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSSwapOrderFlag result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSSwapOrderFlag) ((arg1)->SwapOrderFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ForceCloseReason_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ForceCloseReason, (const char *)arg2, 32-1);
      arg1->ForceCloseReason[32-1] = 0;
    } else {
      arg1->ForceCloseReason[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ForceCloseReason_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->ForceCloseReason);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ErrorMsg_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 256-1);
      arg1->ErrorMsg[256-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_ErrorMsg_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderSource_set___(void * jarg1, char jarg2) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSOrderSource arg2 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  arg2 = (HSOrderSource)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSOrderField_OrderSource_get___(void * jarg1) {
  char jresult ;
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  HSOrderSource result;
  
  arg1 = (CHSOrderField *)jarg1; 
  result = (HSOrderSource) ((arg1)->OrderSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSOrderField___() {
  void * jresult ;
  CHSOrderField *result = 0 ;
  
  result = (CHSOrderField *)new CHSOrderField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSOrderField___(void * jarg1) {
  CHSOrderField *arg1 = (CHSOrderField *) 0 ;
  
  arg1 = (CHSOrderField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTradeField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryTradeField *arg1 = (CHSReqQryTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTradeField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryTradeField *arg1 = (CHSReqQryTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryTradeField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTradeField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryTradeField *arg1 = (CHSReqQryTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTradeField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryTradeField *arg1 = (CHSReqQryTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryTradeField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryTradeField___() {
  void * jresult ;
  CHSReqQryTradeField *result = 0 ;
  
  result = (CHSReqQryTradeField *)new CHSReqQryTradeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryTradeField___(void * jarg1) {
  CHSReqQryTradeField *arg1 = (CHSReqQryTradeField *) 0 ;
  
  arg1 = (CHSReqQryTradeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradeID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 32-1);
      arg1->TradeID[32-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradeID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->TradeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_OrderSysID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 32-1);
      arg1->OrderSysID[32-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_OrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_BrokerOrderID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerOrderID, (const char *)arg2, 32-1);
      arg1->BrokerOrderID[32-1] = 0;
    } else {
      arg1->BrokerOrderID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_BrokerOrderID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->BrokerOrderID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_SessionID_set___(void * jarg1, int jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_OrderRef_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 32-1);
      arg1->OrderRef[32-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_OrderRef_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->OrderRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_Direction_set___(void * jarg1, char jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_OffsetFlag_set___(void * jarg1, char jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSOffsetFlag arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSOffsetFlag)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_OffsetFlag_get___(void * jarg1) {
  char jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSOffsetFlag result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSOffsetFlag) ((arg1)->OffsetFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradeVolume_set___(void * jarg1, double jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TradeVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradeVolume_get___(void * jarg1) {
  double jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSVolume) ((arg1)->TradeVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradePrice_set___(void * jarg1, double jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->TradePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradePrice_get___(void * jarg1) {
  double jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSPrice) ((arg1)->TradePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradingDay_set___(void * jarg1, int jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->TradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradingDay_get___(void * jarg1) {
  int jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSDate result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSDate) ((arg1)->TradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradeTime_set___(void * jarg1, int jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->TradeTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_TradeTime_get___(void * jarg1) {
  int jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  HSTime result;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (HSTime) ((arg1)->TradeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSTradeField___() {
  void * jresult ;
  CHSTradeField *result = 0 ;
  
  result = (CHSTradeField *)new CHSTradeField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSTradeField___(void * jarg1) {
  CHSTradeField *arg1 = (CHSTradeField *) 0 ;
  
  arg1 = (CHSTradeField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseField_ExerciseOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseOrderSysID, (const char *)arg2, 32-1);
      arg1->ExerciseOrderSysID[32-1] = 0;
    } else {
      arg1->ExerciseOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseField_ExerciseOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  result = (char *) ((arg1)->ExerciseOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryExerciseField___() {
  void * jresult ;
  CHSReqQryExerciseField *result = 0 ;
  
  result = (CHSReqQryExerciseField *)new CHSReqQryExerciseField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryExerciseField___(void * jarg1) {
  CHSReqQryExerciseField *arg1 = (CHSReqQryExerciseField *) 0 ;
  
  arg1 = (CHSReqQryExerciseField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExerciseOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseOrderSysID, (const char *)arg2, 32-1);
      arg1->ExerciseOrderSysID[32-1] = 0;
    } else {
      arg1->ExerciseOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExerciseOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->ExerciseOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_SessionID_set___(void * jarg1, int jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSSessionID arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSSessionID)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_SessionID_get___(void * jarg1) {
  int jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSSessionID result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSSessionID) ((arg1)->SessionID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExerciseRef_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExerciseRef, (const char *)arg2, 32-1);
      arg1->ExerciseRef[32-1] = 0;
    } else {
      arg1->ExerciseRef[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExerciseRef_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->ExerciseRef);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExerciseType_set___(void * jarg1, char jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSExerciseType arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSExerciseType)jarg2; 
  if (arg1) (arg1)->ExerciseType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ExerciseType_get___(void * jarg1) {
  char jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSExerciseType result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSExerciseType) ((arg1)->ExerciseType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_InsertDate_set___(void * jarg1, int jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->InsertDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_InsertDate_get___(void * jarg1) {
  int jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSDate result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSDate) ((arg1)->InsertDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSTime result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ErrorMsg_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 256-1);
      arg1->ErrorMsg[256-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_ErrorMsg_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_OrderSource_set___(void * jarg1, char jarg2) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSOrderSource arg2 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  arg2 = (HSOrderSource)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSExerciseField_OrderSource_get___(void * jarg1) {
  char jresult ;
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  HSOrderSource result;
  
  arg1 = (CHSExerciseField *)jarg1; 
  result = (HSOrderSource) ((arg1)->OrderSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSExerciseField___() {
  void * jresult ;
  CHSExerciseField *result = 0 ;
  
  result = (CHSExerciseField *)new CHSExerciseField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSExerciseField___(void * jarg1) {
  CHSExerciseField *arg1 = (CHSExerciseField *) 0 ;
  
  arg1 = (CHSExerciseField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryLockField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryLockField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryLockField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryLockField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryLockField_LockOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LockOrderSysID, (const char *)arg2, 32-1);
      arg1->LockOrderSysID[32-1] = 0;
    } else {
      arg1->LockOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryLockField_LockOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  result = (char *) ((arg1)->LockOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryLockField___() {
  void * jresult ;
  CHSReqQryLockField *result = 0 ;
  
  result = (CHSReqQryLockField *)new CHSReqQryLockField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryLockField___(void * jarg1) {
  CHSReqQryLockField *arg1 = (CHSReqQryLockField *) 0 ;
  
  arg1 = (CHSReqQryLockField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_LockOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LockOrderSysID, (const char *)arg2, 32-1);
      arg1->LockOrderSysID[32-1] = 0;
    } else {
      arg1->LockOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_LockOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (char *) ((arg1)->LockOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_LockType_set___(void * jarg1, char jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSLockType arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (HSLockType)jarg2; 
  if (arg1) (arg1)->LockType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_LockType_get___(void * jarg1) {
  char jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSLockType result;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (HSLockType) ((arg1)->LockType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_TradingDay_set___(void * jarg1, int jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->TradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_TradingDay_get___(void * jarg1) {
  int jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSDate result;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (HSDate) ((arg1)->TradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSTime result;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_ErrorMsg_set___(void * jarg1, char * jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 256-1);
      arg1->ErrorMsg[256-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_ErrorMsg_get___(void * jarg1) {
  char * jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_OrderSource_set___(void * jarg1, char jarg2) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSOrderSource arg2 ;
  
  arg1 = (CHSLockField *)jarg1; 
  arg2 = (HSOrderSource)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSLockField_OrderSource_get___(void * jarg1) {
  char jresult ;
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  HSOrderSource result;
  
  arg1 = (CHSLockField *)jarg1; 
  result = (HSOrderSource) ((arg1)->OrderSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSLockField___() {
  void * jresult ;
  CHSLockField *result = 0 ;
  
  result = (CHSLockField *)new CHSLockField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSLockField___(void * jarg1) {
  CHSLockField *arg1 = (CHSLockField *) 0 ;
  
  arg1 = (CHSLockField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCombActionField_CombOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSReqQryCombActionField *arg1 = (CHSReqQryCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombOrderSysID, (const char *)arg2, 32-1);
      arg1->CombOrderSysID[32-1] = 0;
    } else {
      arg1->CombOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCombActionField_CombOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryCombActionField *arg1 = (CHSReqQryCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryCombActionField *)jarg1; 
  result = (char *) ((arg1)->CombOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryCombActionField___() {
  void * jresult ;
  CHSReqQryCombActionField *result = 0 ;
  
  result = (CHSReqQryCombActionField *)new CHSReqQryCombActionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryCombActionField___(void * jarg1) {
  CHSReqQryCombActionField *arg1 = (CHSReqQryCombActionField *) 0 ;
  
  arg1 = (CHSReqQryCombActionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombOrderSysID_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombOrderSysID, (const char *)arg2, 32-1);
      arg1->CombOrderSysID[32-1] = 0;
    } else {
      arg1->CombOrderSysID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombOrderSysID_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->CombOrderSysID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombPositionID_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombPositionID, (const char *)arg2, 32-1);
      arg1->CombPositionID[32-1] = 0;
    } else {
      arg1->CombPositionID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombPositionID_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->CombPositionID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombStrategyID_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombStrategyID, (const char *)arg2, 8-1);
      arg1->CombStrategyID[8-1] = 0;
    } else {
      arg1->CombStrategyID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombStrategyID_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->CombStrategyID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_Direction_set___(void * jarg1, char jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombDirection_set___(void * jarg1, char jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSCombDirection arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSCombDirection)jarg2; 
  if (arg1) (arg1)->CombDirection = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_CombDirection_get___(void * jarg1) {
  char jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSCombDirection result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSCombDirection) ((arg1)->CombDirection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_OrderVolume_set___(void * jarg1, double jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_OrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSVolume) ((arg1)->OrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_OrderStatus_set___(void * jarg1, char jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSOrderStatus arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSOrderStatus)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_OrderStatus_get___(void * jarg1) {
  char jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSOrderStatus result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSOrderStatus) ((arg1)->OrderStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_TradingDay_set___(void * jarg1, int jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->TradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_TradingDay_get___(void * jarg1) {
  int jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSDate result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSDate) ((arg1)->TradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_InsertDate_set___(void * jarg1, int jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->InsertDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_InsertDate_get___(void * jarg1) {
  int jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSDate result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSDate) ((arg1)->InsertDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_InsertTime_set___(void * jarg1, int jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->InsertTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_InsertTime_get___(void * jarg1) {
  int jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSTime result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSTime) ((arg1)->InsertTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_ErrorMsg_set___(void * jarg1, char * jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 256-1);
      arg1->ErrorMsg[256-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_ErrorMsg_get___(void * jarg1) {
  char * jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_OrderSource_set___(void * jarg1, char jarg2) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSOrderSource arg2 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  arg2 = (HSOrderSource)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSCombActionField_OrderSource_get___(void * jarg1) {
  char jresult ;
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  HSOrderSource result;
  
  arg1 = (CHSCombActionField *)jarg1; 
  result = (HSOrderSource) ((arg1)->OrderSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSCombActionField___() {
  void * jresult ;
  CHSCombActionField *result = 0 ;
  
  result = (CHSCombActionField *)new CHSCombActionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSCombActionField___(void * jarg1) {
  CHSCombActionField *arg1 = (CHSCombActionField *) 0 ;
  
  arg1 = (CHSCombActionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryPositionCombineDetailField___() {
  void * jresult ;
  CHSReqQryPositionCombineDetailField *result = 0 ;
  
  result = (CHSReqQryPositionCombineDetailField *)new CHSReqQryPositionCombineDetailField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryPositionCombineDetailField___(void * jarg1) {
  CHSReqQryPositionCombineDetailField *arg1 = (CHSReqQryPositionCombineDetailField *) 0 ;
  
  arg1 = (CHSReqQryPositionCombineDetailField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_CombPositionID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombPositionID, (const char *)arg2, 32-1);
      arg1->CombPositionID[32-1] = 0;
    } else {
      arg1->CombPositionID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_CombPositionID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (char *) ((arg1)->CombPositionID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_CombStrategyID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CombStrategyID, (const char *)arg2, 8-1);
      arg1->CombStrategyID[8-1] = 0;
    } else {
      arg1->CombStrategyID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_CombStrategyID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (char *) ((arg1)->CombStrategyID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_Direction_set___(void * jarg1, char jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_YdPositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->YdPositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_YdPositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->YdPositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_AvailablePositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AvailablePositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_AvailablePositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->AvailablePositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_TotalCombVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TotalCombVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_TotalCombVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->TotalCombVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_TotalSplitVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TotalSplitVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_TotalSplitVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->TotalSplitVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_PositionMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->PositionMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_PositionMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSBalance) ((arg1)->PositionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_OpenDate_set___(void * jarg1, int jarg2) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->OpenDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionCombineDetailField_OpenDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  result = (HSDate) ((arg1)->OpenDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryPositionCombineDetailField___() {
  void * jresult ;
  CHSRspQryPositionCombineDetailField *result = 0 ;
  
  result = (CHSRspQryPositionCombineDetailField *)new CHSRspQryPositionCombineDetailField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryPositionCombineDetailField___(void * jarg1) {
  CHSRspQryPositionCombineDetailField *arg1 = (CHSRspQryPositionCombineDetailField *) 0 ;
  
  arg1 = (CHSRspQryPositionCombineDetailField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryInstrumentField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryInstrumentField *arg1 = (CHSReqQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryInstrumentField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryInstrumentField *arg1 = (CHSReqQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryInstrumentField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryInstrumentField *arg1 = (CHSReqQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryInstrumentField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryInstrumentField *arg1 = (CHSReqQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryInstrumentField___() {
  void * jresult ;
  CHSReqQryInstrumentField *result = 0 ;
  
  result = (CHSReqQryInstrumentField *)new CHSReqQryInstrumentField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryInstrumentField___(void * jarg1) {
  CHSReqQryInstrumentField *arg1 = (CHSReqQryInstrumentField *) 0 ;
  
  arg1 = (CHSReqQryInstrumentField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_InstrumentName_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentName, (const char *)arg2, 32-1);
      arg1->InstrumentName[32-1] = 0;
    } else {
      arg1->InstrumentName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_InstrumentName_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->InstrumentName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_InstrumentEngName_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentEngName, (const char *)arg2, 32-1);
      arg1->InstrumentEngName[32-1] = 0;
    } else {
      arg1->InstrumentEngName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_InstrumentEngName_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->InstrumentEngName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ProductID_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ProductID, (const char *)arg2, 4-1);
      arg1->ProductID[4-1] = 0;
    } else {
      arg1->ProductID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ProductID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->ProductID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ProductType_set___(void * jarg1, char jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSProductType arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSProductType)jarg2; 
  if (arg1) (arg1)->ProductType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ProductType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSProductType result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSProductType) ((arg1)->ProductType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxMarketOrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MaxMarketOrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxMarketOrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSVolume) ((arg1)->MaxMarketOrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MinMarketOrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MinMarketOrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MinMarketOrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSVolume) ((arg1)->MinMarketOrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxLimitOrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MaxLimitOrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxLimitOrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSVolume) ((arg1)->MaxLimitOrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MinLimitOrderVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->MinLimitOrderVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MinLimitOrderVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSVolume) ((arg1)->MinLimitOrderVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_VolumeMultiple_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->VolumeMultiple = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_VolumeMultiple_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSVolume) ((arg1)->VolumeMultiple);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_PriceTick_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->PriceTick = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_PriceTick_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSPrice) ((arg1)->PriceTick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxMarginSideAlgorithm_set___(void * jarg1, char jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSMaxMarginSideAlgorithm arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSMaxMarginSideAlgorithm)jarg2; 
  if (arg1) (arg1)->MaxMarginSideAlgorithm = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxMarginSideAlgorithm_get___(void * jarg1) {
  char jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSMaxMarginSideAlgorithm result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSMaxMarginSideAlgorithm) ((arg1)->MaxMarginSideAlgorithm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxMarginSideProductID_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->MaxMarginSideProductID, (const char *)arg2, 256-1);
      arg1->MaxMarginSideProductID[256-1] = 0;
    } else {
      arg1->MaxMarginSideProductID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MaxMarginSideProductID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->MaxMarginSideProductID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ExercisePrice_set___(void * jarg1, double jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->ExercisePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ExercisePrice_get___(void * jarg1) {
  double jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSPrice) ((arg1)->ExercisePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_OptionsType_set___(void * jarg1, char jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSOptionsType arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSOptionsType)jarg2; 
  if (arg1) (arg1)->OptionsType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_OptionsType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSOptionsType result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSOptionsType) ((arg1)->OptionsType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_TradingFlag_set___(void * jarg1, char jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSTradingFlag arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSTradingFlag)jarg2; 
  if (arg1) (arg1)->TradingFlag = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_TradingFlag_get___(void * jarg1) {
  char jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSTradingFlag result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSTradingFlag) ((arg1)->TradingFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MarketDate_set___(void * jarg1, int jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->MarketDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_MarketDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSDate) ((arg1)->MarketDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ExpireDate_set___(void * jarg1, int jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->ExpireDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_ExpireDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSDate) ((arg1)->ExpireDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_BeginExerciseDate_set___(void * jarg1, int jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->BeginExerciseDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_BeginExerciseDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSDate) ((arg1)->BeginExerciseDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_EndExerciseDate_set___(void * jarg1, int jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->EndExerciseDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_EndExerciseDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSDate) ((arg1)->EndExerciseDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_BeginDeliveryDate_set___(void * jarg1, int jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->BeginDeliveryDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_BeginDeliveryDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSDate) ((arg1)->BeginDeliveryDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_EndDeliveryDate_set___(void * jarg1, int jarg2) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->EndDeliveryDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryInstrumentField_EndDeliveryDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  result = (HSDate) ((arg1)->EndDeliveryDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryInstrumentField___() {
  void * jresult ;
  CHSRspQryInstrumentField *result = 0 ;
  
  result = (CHSRspQryInstrumentField *)new CHSRspQryInstrumentField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryInstrumentField___(void * jarg1) {
  CHSRspQryInstrumentField *arg1 = (CHSRspQryInstrumentField *) 0 ;
  
  arg1 = (CHSRspQryInstrumentField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCoveredShortField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryCoveredShortField *arg1 = (CHSReqQryCoveredShortField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryCoveredShortField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCoveredShortField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryCoveredShortField *arg1 = (CHSReqQryCoveredShortField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryCoveredShortField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryCoveredShortField___() {
  void * jresult ;
  CHSReqQryCoveredShortField *result = 0 ;
  
  result = (CHSReqQryCoveredShortField *)new CHSReqQryCoveredShortField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryCoveredShortField___(void * jarg1) {
  CHSReqQryCoveredShortField *arg1 = (CHSReqQryCoveredShortField *) 0 ;
  
  arg1 = (CHSReqQryCoveredShortField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_CoveredLockVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CoveredLockVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_CoveredLockVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (HSVolume) ((arg1)->CoveredLockVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_CoveredShortVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CoveredShortVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_CoveredShortVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (HSVolume) ((arg1)->CoveredShortVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_CoveredEstimateShortVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CoveredEstimateShortVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_CoveredEstimateShortVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (HSVolume) ((arg1)->CoveredEstimateShortVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_NotifyMsg_set___(void * jarg1, char * jarg2) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->NotifyMsg, (const char *)arg2, 256-1);
      arg1->NotifyMsg[256-1] = 0;
    } else {
      arg1->NotifyMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCoveredShortField_NotifyMsg_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  result = (char *) ((arg1)->NotifyMsg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryCoveredShortField___() {
  void * jresult ;
  CHSRspQryCoveredShortField *result = 0 ;
  
  result = (CHSRspQryCoveredShortField *)new CHSRspQryCoveredShortField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryCoveredShortField___(void * jarg1) {
  CHSRspQryCoveredShortField *arg1 = (CHSRspQryCoveredShortField *) 0 ;
  
  arg1 = (CHSRspQryCoveredShortField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseAssignField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseAssignField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseAssignField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseAssignField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseAssignField_PositionType_set___(void * jarg1, char jarg2) {
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  HSPositionType arg2 ;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  arg2 = (HSPositionType)jarg2; 
  if (arg1) (arg1)->PositionType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryExerciseAssignField_PositionType_get___(void * jarg1) {
  char jresult ;
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  HSPositionType result;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  result = (HSPositionType) ((arg1)->PositionType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryExerciseAssignField___() {
  void * jresult ;
  CHSReqQryExerciseAssignField *result = 0 ;
  
  result = (CHSReqQryExerciseAssignField *)new CHSReqQryExerciseAssignField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryExerciseAssignField___(void * jarg1) {
  CHSReqQryExerciseAssignField *arg1 = (CHSReqQryExerciseAssignField *) 0 ;
  
  arg1 = (CHSReqQryExerciseAssignField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_PositionType_set___(void * jarg1, char jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSPositionType arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSPositionType)jarg2; 
  if (arg1) (arg1)->PositionType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_PositionType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSPositionType result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSPositionType) ((arg1)->PositionType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_OptionsType_set___(void * jarg1, char jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSOptionsType arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSOptionsType)jarg2; 
  if (arg1) (arg1)->OptionsType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_OptionsType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSOptionsType result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSOptionsType) ((arg1)->OptionsType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExercisePrice_set___(void * jarg1, double jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->ExercisePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExercisePrice_get___(void * jarg1) {
  double jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSPrice) ((arg1)->ExercisePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExerciseVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->ExerciseVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExerciseVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSVolume) ((arg1)->ExerciseVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_DeliveryVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->DeliveryVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_DeliveryVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSVolume) ((arg1)->DeliveryVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExerciseFrozenBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->ExerciseFrozenBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_ExerciseFrozenBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSBalance) ((arg1)->ExerciseFrozenBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_SettlementBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->SettlementBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryExerciseAssignField_SettlementBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  result = (HSBalance) ((arg1)->SettlementBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryExerciseAssignField___() {
  void * jresult ;
  CHSRspQryExerciseAssignField *result = 0 ;
  
  result = (CHSRspQryExerciseAssignField *)new CHSRspQryExerciseAssignField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryExerciseAssignField___(void * jarg1) {
  CHSRspQryExerciseAssignField *arg1 = (CHSRspQryExerciseAssignField *) 0 ;
  
  arg1 = (CHSRspQryExerciseAssignField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_BankID_set___(void * jarg1, char * jarg2) {
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 8-1);
      arg1->BankID[8-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_BankID_get___(void * jarg1) {
  char * jresult ;
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  result = (char *) ((arg1)->BankID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_TransferType_set___(void * jarg1, char jarg2) {
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  HSTransferType arg2 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  arg2 = (HSTransferType)jarg2; 
  if (arg1) (arg1)->TransferType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_TransferType_get___(void * jarg1) {
  char jresult ;
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  HSTransferType result;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  result = (HSTransferType) ((arg1)->TransferType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_OccurBalance_set___(void * jarg1, double jarg2) {
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->OccurBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_OccurBalance_get___(void * jarg1) {
  double jresult ;
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  result = (HSBalance) ((arg1)->OccurBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_FundPassword_set___(void * jarg1, char * jarg2) {
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->FundPassword, (const char *)arg2, 16-1);
      arg1->FundPassword[16-1] = 0;
    } else {
      arg1->FundPassword[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_FundPassword_get___(void * jarg1) {
  char * jresult ;
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  result = (char *) ((arg1)->FundPassword);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_BankPassword_set___(void * jarg1, char * jarg2) {
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassword, (const char *)arg2, 16-1);
      arg1->BankPassword[16-1] = 0;
    } else {
      arg1->BankPassword[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqTransferField_BankPassword_get___(void * jarg1) {
  char * jresult ;
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  result = (char *) ((arg1)->BankPassword);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqTransferField___() {
  void * jresult ;
  CHSReqTransferField *result = 0 ;
  
  result = (CHSReqTransferField *)new CHSReqTransferField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqTransferField___(void * jarg1) {
  CHSReqTransferField *arg1 = (CHSReqTransferField *) 0 ;
  
  arg1 = (CHSReqTransferField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspTransferField_TransferSerialID_set___(void * jarg1, int jarg2) {
  CHSRspTransferField *arg1 = (CHSRspTransferField *) 0 ;
  HSNum arg2 ;
  
  arg1 = (CHSRspTransferField *)jarg1; 
  arg2 = (HSNum)jarg2; 
  if (arg1) (arg1)->TransferSerialID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspTransferField_TransferSerialID_get___(void * jarg1) {
  int jresult ;
  CHSRspTransferField *arg1 = (CHSRspTransferField *) 0 ;
  HSNum result;
  
  arg1 = (CHSRspTransferField *)jarg1; 
  result = (HSNum) ((arg1)->TransferSerialID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspTransferField___() {
  void * jresult ;
  CHSRspTransferField *result = 0 ;
  
  result = (CHSRspTransferField *)new CHSRspTransferField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspTransferField___(void * jarg1) {
  CHSRspTransferField *arg1 = (CHSRspTransferField *) 0 ;
  
  arg1 = (CHSRspTransferField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTransferField_BankID_set___(void * jarg1, char * jarg2) {
  CHSReqQryTransferField *arg1 = (CHSReqQryTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 8-1);
      arg1->BankID[8-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTransferField_BankID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryTransferField *arg1 = (CHSReqQryTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryTransferField *)jarg1; 
  result = (char *) ((arg1)->BankID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTransferField_TransferSerialID_set___(void * jarg1, int jarg2) {
  CHSReqQryTransferField *arg1 = (CHSReqQryTransferField *) 0 ;
  HSNum arg2 ;
  
  arg1 = (CHSReqQryTransferField *)jarg1; 
  arg2 = (HSNum)jarg2; 
  if (arg1) (arg1)->TransferSerialID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryTransferField_TransferSerialID_get___(void * jarg1) {
  int jresult ;
  CHSReqQryTransferField *arg1 = (CHSReqQryTransferField *) 0 ;
  HSNum result;
  
  arg1 = (CHSReqQryTransferField *)jarg1; 
  result = (HSNum) ((arg1)->TransferSerialID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryTransferField___() {
  void * jresult ;
  CHSReqQryTransferField *result = 0 ;
  
  result = (CHSReqQryTransferField *)new CHSReqQryTransferField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryTransferField___(void * jarg1) {
  CHSReqQryTransferField *arg1 = (CHSReqQryTransferField *) 0 ;
  
  arg1 = (CHSReqQryTransferField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferSerialID_set___(void * jarg1, int jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSNum arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (HSNum)jarg2; 
  if (arg1) (arg1)->TransferSerialID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferSerialID_get___(void * jarg1) {
  int jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSNum result;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (HSNum) ((arg1)->TransferSerialID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_BankID_set___(void * jarg1, char * jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 8-1);
      arg1->BankID[8-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_BankID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (char *) ((arg1)->BankID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_BankName_set___(void * jarg1, char * jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankName, (const char *)arg2, 64-1);
      arg1->BankName[64-1] = 0;
    } else {
      arg1->BankName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_BankName_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (char *) ((arg1)->BankName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_BusinessName_set___(void * jarg1, char * jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessName, (const char *)arg2, 64-1);
      arg1->BusinessName[64-1] = 0;
    } else {
      arg1->BusinessName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_BusinessName_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (char *) ((arg1)->BusinessName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_OccurBalance_set___(void * jarg1, double jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->OccurBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_OccurBalance_get___(void * jarg1) {
  double jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (HSBalance) ((arg1)->OccurBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferTime_set___(void * jarg1, int jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->TransferTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferTime_get___(void * jarg1) {
  int jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSTime result;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (HSTime) ((arg1)->TransferTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferStatus_set___(void * jarg1, char jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSTransferStatus arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (HSTransferStatus)jarg2; 
  if (arg1) (arg1)->TransferStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSTransferStatus result;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (HSTransferStatus) ((arg1)->TransferStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferSource_set___(void * jarg1, char jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSTransferSource arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (HSTransferSource)jarg2; 
  if (arg1) (arg1)->TransferSource = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_TransferSource_get___(void * jarg1) {
  char jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  HSTransferSource result;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (HSTransferSource) ((arg1)->TransferSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_Remarks_set___(void * jarg1, char * jarg2) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Remarks, (const char *)arg2, 256-1);
      arg1->Remarks[256-1] = 0;
    } else {
      arg1->Remarks[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryTransferField_Remarks_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  result = (char *) ((arg1)->Remarks);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryTransferField___() {
  void * jresult ;
  CHSRspQryTransferField *result = 0 ;
  
  result = (CHSRspQryTransferField *)new CHSRspQryTransferField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryTransferField___(void * jarg1) {
  CHSRspQryTransferField *arg1 = (CHSRspQryTransferField *) 0 ;
  
  arg1 = (CHSRspQryTransferField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankBalanceField_BankID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 8-1);
      arg1->BankID[8-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankBalanceField_BankID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  result = (char *) ((arg1)->BankID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankBalanceField_FundPassword_set___(void * jarg1, char * jarg2) {
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->FundPassword, (const char *)arg2, 16-1);
      arg1->FundPassword[16-1] = 0;
    } else {
      arg1->FundPassword[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankBalanceField_FundPassword_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  result = (char *) ((arg1)->FundPassword);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankBalanceField_BankPassword_set___(void * jarg1, char * jarg2) {
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassword, (const char *)arg2, 16-1);
      arg1->BankPassword[16-1] = 0;
    } else {
      arg1->BankPassword[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankBalanceField_BankPassword_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  result = (char *) ((arg1)->BankPassword);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQueryBankBalanceField___() {
  void * jresult ;
  CHSReqQueryBankBalanceField *result = 0 ;
  
  result = (CHSReqQueryBankBalanceField *)new CHSReqQueryBankBalanceField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQueryBankBalanceField___(void * jarg1) {
  CHSReqQueryBankBalanceField *arg1 = (CHSReqQueryBankBalanceField *) 0 ;
  
  arg1 = (CHSReqQueryBankBalanceField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankBalanceField_TransferSerialID_set___(void * jarg1, int jarg2) {
  CHSRspQueryBankBalanceField *arg1 = (CHSRspQueryBankBalanceField *) 0 ;
  HSNum arg2 ;
  
  arg1 = (CHSRspQueryBankBalanceField *)jarg1; 
  arg2 = (HSNum)jarg2; 
  if (arg1) (arg1)->TransferSerialID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankBalanceField_TransferSerialID_get___(void * jarg1) {
  int jresult ;
  CHSRspQueryBankBalanceField *arg1 = (CHSRspQueryBankBalanceField *) 0 ;
  HSNum result;
  
  arg1 = (CHSRspQueryBankBalanceField *)jarg1; 
  result = (HSNum) ((arg1)->TransferSerialID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQueryBankBalanceField___() {
  void * jresult ;
  CHSRspQueryBankBalanceField *result = 0 ;
  
  result = (CHSRspQueryBankBalanceField *)new CHSRspQueryBankBalanceField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQueryBankBalanceField___(void * jarg1) {
  CHSRspQueryBankBalanceField *arg1 = (CHSRspQueryBankBalanceField *) 0 ;
  
  arg1 = (CHSRspQueryBankBalanceField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankAccountField_BankID_set___(void * jarg1, char * jarg2) {
  CHSReqQueryBankAccountField *arg1 = (CHSReqQueryBankAccountField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQueryBankAccountField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 8-1);
      arg1->BankID[8-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBankAccountField_BankID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQueryBankAccountField *arg1 = (CHSReqQueryBankAccountField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQueryBankAccountField *)jarg1; 
  result = (char *) ((arg1)->BankID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQueryBankAccountField___() {
  void * jresult ;
  CHSReqQueryBankAccountField *result = 0 ;
  
  result = (CHSReqQueryBankAccountField *)new CHSReqQueryBankAccountField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQueryBankAccountField___(void * jarg1) {
  CHSReqQueryBankAccountField *arg1 = (CHSReqQueryBankAccountField *) 0 ;
  
  arg1 = (CHSReqQueryBankAccountField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankAccountField_BankID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 8-1);
      arg1->BankID[8-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankAccountField_BankID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  result = (char *) ((arg1)->BankID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankAccountField_BankName_set___(void * jarg1, char * jarg2) {
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankName, (const char *)arg2, 64-1);
      arg1->BankName[64-1] = 0;
    } else {
      arg1->BankName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankAccountField_BankName_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  result = (char *) ((arg1)->BankName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankAccountField_BankAccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccountID, (const char *)arg2, 32-1);
      arg1->BankAccountID[32-1] = 0;
    } else {
      arg1->BankAccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBankAccountField_BankAccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  result = (char *) ((arg1)->BankAccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQueryBankAccountField___() {
  void * jresult ;
  CHSRspQueryBankAccountField *result = 0 ;
  
  result = (CHSRspQueryBankAccountField *)new CHSRspQueryBankAccountField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQueryBankAccountField___(void * jarg1) {
  CHSRspQueryBankAccountField *arg1 = (CHSRspQueryBankAccountField *) 0 ;
  
  arg1 = (CHSRspQueryBankAccountField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBillContentField_BeginDate_set___(void * jarg1, int jarg2) {
  CHSReqQueryBillContentField *arg1 = (CHSReqQueryBillContentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSReqQueryBillContentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->BeginDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBillContentField_BeginDate_get___(void * jarg1) {
  int jresult ;
  CHSReqQueryBillContentField *arg1 = (CHSReqQueryBillContentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSReqQueryBillContentField *)jarg1; 
  result = (HSDate) ((arg1)->BeginDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBillContentField_EndDate_set___(void * jarg1, int jarg2) {
  CHSReqQueryBillContentField *arg1 = (CHSReqQueryBillContentField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSReqQueryBillContentField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->EndDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQueryBillContentField_EndDate_get___(void * jarg1) {
  int jresult ;
  CHSReqQueryBillContentField *arg1 = (CHSReqQueryBillContentField *) 0 ;
  HSDate result;
  
  arg1 = (CHSReqQueryBillContentField *)jarg1; 
  result = (HSDate) ((arg1)->EndDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQueryBillContentField___() {
  void * jresult ;
  CHSReqQueryBillContentField *result = 0 ;
  
  result = (CHSReqQueryBillContentField *)new CHSReqQueryBillContentField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQueryBillContentField___(void * jarg1) {
  CHSReqQueryBillContentField *arg1 = (CHSReqQueryBillContentField *) 0 ;
  
  arg1 = (CHSReqQueryBillContentField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBillContentField_BillContent_set___(void * jarg1, char * jarg2) {
  CHSRspQueryBillContentField *arg1 = (CHSRspQueryBillContentField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQueryBillContentField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BillContent, (const char *)arg2, 256-1);
      arg1->BillContent[256-1] = 0;
    } else {
      arg1->BillContent[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQueryBillContentField_BillContent_get___(void * jarg1) {
  char * jresult ;
  CHSRspQueryBillContentField *arg1 = (CHSRspQueryBillContentField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQueryBillContentField *)jarg1; 
  result = (char *) ((arg1)->BillContent);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQueryBillContentField___() {
  void * jresult ;
  CHSRspQueryBillContentField *result = 0 ;
  
  result = (CHSRspQueryBillContentField *)new CHSRspQueryBillContentField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQueryBillContentField___(void * jarg1) {
  CHSRspQueryBillContentField *arg1 = (CHSRspQueryBillContentField *) 0 ;
  
  arg1 = (CHSRspQueryBillContentField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqBillConfirmField___() {
  void * jresult ;
  CHSReqBillConfirmField *result = 0 ;
  
  result = (CHSReqBillConfirmField *)new CHSReqBillConfirmField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqBillConfirmField___(void * jarg1) {
  CHSReqBillConfirmField *arg1 = (CHSReqBillConfirmField *) 0 ;
  
  arg1 = (CHSReqBillConfirmField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspBillConfirmField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspBillConfirmField *arg1 = (CHSRspBillConfirmField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspBillConfirmField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspBillConfirmField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspBillConfirmField *arg1 = (CHSRspBillConfirmField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspBillConfirmField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspBillConfirmField_BillConfirmStatus_set___(void * jarg1, char jarg2) {
  CHSRspBillConfirmField *arg1 = (CHSRspBillConfirmField *) 0 ;
  HSBillConfirmStatus arg2 ;
  
  arg1 = (CHSRspBillConfirmField *)jarg1; 
  arg2 = (HSBillConfirmStatus)jarg2; 
  if (arg1) (arg1)->BillConfirmStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspBillConfirmField_BillConfirmStatus_get___(void * jarg1) {
  char jresult ;
  CHSRspBillConfirmField *arg1 = (CHSRspBillConfirmField *) 0 ;
  HSBillConfirmStatus result;
  
  arg1 = (CHSRspBillConfirmField *)jarg1; 
  result = (HSBillConfirmStatus) ((arg1)->BillConfirmStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspBillConfirmField___() {
  void * jresult ;
  CHSRspBillConfirmField *result = 0 ;
  
  result = (CHSRspBillConfirmField *)new CHSRspBillConfirmField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspBillConfirmField___(void * jarg1) {
  CHSRspBillConfirmField *arg1 = (CHSRspBillConfirmField *) 0 ;
  
  arg1 = (CHSRspBillConfirmField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryMarginField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryMarginField___() {
  void * jresult ;
  CHSReqQryMarginField *result = 0 ;
  
  result = (CHSReqQryMarginField *)new CHSReqQryMarginField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryMarginField___(void * jarg1) {
  CHSReqQryMarginField *arg1 = (CHSReqQryMarginField *) 0 ;
  
  arg1 = (CHSReqQryMarginField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_LongMarginRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->LongMarginRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_LongMarginRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (HSRate) ((arg1)->LongMarginRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_LongMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->LongMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_LongMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (HSBalance) ((arg1)->LongMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_ShortMarginRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->ShortMarginRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_ShortMarginRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (HSRate) ((arg1)->ShortMarginRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_ShortMargin_set___(void * jarg1, double jarg2) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->ShortMargin = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryMarginField_ShortMargin_get___(void * jarg1) {
  double jresult ;
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  result = (HSBalance) ((arg1)->ShortMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryMarginField___() {
  void * jresult ;
  CHSRspQryMarginField *result = 0 ;
  
  result = (CHSRspQryMarginField *)new CHSRspQryMarginField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryMarginField___(void * jarg1) {
  CHSRspQryMarginField *arg1 = (CHSRspQryMarginField *) 0 ;
  
  arg1 = (CHSRspQryMarginField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCommissionField_ProductType_set___(void * jarg1, char jarg2) {
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  HSProductType arg2 ;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  arg2 = (HSProductType)jarg2; 
  if (arg1) (arg1)->ProductType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCommissionField_ProductType_get___(void * jarg1) {
  char jresult ;
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  HSProductType result;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  result = (HSProductType) ((arg1)->ProductType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCommissionField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCommissionField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCommissionField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryCommissionField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryCommissionField___() {
  void * jresult ;
  CHSReqQryCommissionField *result = 0 ;
  
  result = (CHSReqQryCommissionField *)new CHSReqQryCommissionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryCommissionField___(void * jarg1) {
  CHSReqQryCommissionField *arg1 = (CHSReqQryCommissionField *) 0 ;
  
  arg1 = (CHSReqQryCommissionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ProductType_set___(void * jarg1, char jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSProductType arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSProductType)jarg2; 
  if (arg1) (arg1)->ProductType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ProductType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSProductType result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSProductType) ((arg1)->ProductType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_UnderlyingInstrID_set___(void * jarg1, char * jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->UnderlyingInstrID, (const char *)arg2, 32-1);
      arg1->UnderlyingInstrID[32-1] = 0;
    } else {
      arg1->UnderlyingInstrID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_UnderlyingInstrID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (char *) ((arg1)->UnderlyingInstrID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongOpenCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->LongOpenCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongOpenCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->LongOpenCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongOpenCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->LongOpenCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongOpenCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->LongOpenCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->LongCloseCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->LongCloseCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->LongCloseCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->LongCloseCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseTodayCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->LongCloseTodayCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseTodayCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->LongCloseTodayCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseTodayCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->LongCloseTodayCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_LongCloseTodayCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->LongCloseTodayCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortOpenCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->ShortOpenCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortOpenCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->ShortOpenCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortOpenCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->ShortOpenCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortOpenCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->ShortOpenCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->ShortCloseCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->ShortCloseCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->ShortCloseCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->ShortCloseCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseTodayCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->ShortCloseTodayCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseTodayCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->ShortCloseTodayCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseTodayCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->ShortCloseTodayCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ShortCloseTodayCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->ShortCloseTodayCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ExerciseCommissionRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->ExerciseCommissionRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ExerciseCommissionRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->ExerciseCommissionRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ExerciseCommission_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->ExerciseCommission = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_ExerciseCommission_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->ExerciseCommission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_TradeValueRatio_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSRate)jarg2; 
  if (arg1) (arg1)->TradeValueRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_TradeValueRatio_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSRate result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSRate) ((arg1)->TradeValueRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_StockValue_set___(void * jarg1, double jarg2) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->StockValue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryCommissionField_StockValue_get___(void * jarg1) {
  double jresult ;
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  result = (HSBalance) ((arg1)->StockValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryCommissionField___() {
  void * jresult ;
  CHSRspQryCommissionField *result = 0 ;
  
  result = (CHSRspQryCommissionField *)new CHSRspQryCommissionField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryCommissionField___(void * jarg1) {
  CHSRspQryCommissionField *arg1 = (CHSRspQryCommissionField *) 0 ;
  
  arg1 = (CHSRspQryCommissionField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryPositionDetailField___() {
  void * jresult ;
  CHSReqQryPositionDetailField *result = 0 ;
  
  result = (CHSReqQryPositionDetailField *)new CHSReqQryPositionDetailField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryPositionDetailField___(void * jarg1) {
  CHSReqQryPositionDetailField *arg1 = (CHSReqQryPositionDetailField *) 0 ;
  
  arg1 = (CHSReqQryPositionDetailField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_AccountID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 18-1);
      arg1->AccountID[18-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_AccountID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (char *) ((arg1)->AccountID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TradeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 32-1);
      arg1->TradeID[32-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TradeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (char *) ((arg1)->TradeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_OpenDate_set___(void * jarg1, int jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->OpenDate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_OpenDate_get___(void * jarg1) {
  int jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSDate result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSDate) ((arg1)->OpenDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_Direction_set___(void * jarg1, char jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSDirection arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSDirection)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_Direction_get___(void * jarg1) {
  char jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSDirection result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSDirection) ((arg1)->Direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_HedgeType_set___(void * jarg1, char jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSHedgeType arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSHedgeType)jarg2; 
  if (arg1) (arg1)->HedgeType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_HedgeType_get___(void * jarg1) {
  char jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSHedgeType result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSHedgeType) ((arg1)->HedgeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_YdPositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->YdPositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_YdPositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->YdPositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_CurrentPositionVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->CurrentPositionVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_CurrentPositionVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->CurrentPositionVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TradeVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TradeVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TradeVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->TradeVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_PositionPrice_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->PositionPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_PositionPrice_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSPrice) ((arg1)->PositionPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_CloseProfitByDate_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->CloseProfitByDate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_CloseProfitByDate_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSBalance) ((arg1)->CloseProfitByDate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TodayFrozenVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TodayFrozenVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TodayFrozenVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->TodayFrozenVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TodayCloseVolume_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TodayCloseVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_TodayCloseVolume_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSVolume) ((arg1)->TodayCloseVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_ArbitragePositionID_set___(void * jarg1, char * jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ArbitragePositionID, (const char *)arg2, 32-1);
      arg1->ArbitragePositionID[32-1] = 0;
    } else {
      arg1->ArbitragePositionID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_ArbitragePositionID_get___(void * jarg1) {
  char * jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (char *) ((arg1)->ArbitragePositionID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_LegID_set___(void * jarg1, double jarg2) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSLegID arg2 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  arg2 = (HSLegID)jarg2; 
  if (arg1) (arg1)->LegID = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQryPositionDetailField_LegID_get___(void * jarg1) {
  double jresult ;
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  HSLegID result;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  result = (HSLegID) ((arg1)->LegID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQryPositionDetailField___() {
  void * jresult ;
  CHSRspQryPositionDetailField *result = 0 ;
  
  result = (CHSRspQryPositionDetailField *)new CHSRspQryPositionDetailField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQryPositionDetailField___(void * jarg1) {
  CHSRspQryPositionDetailField *arg1 = (CHSRspQryPositionDetailField *) 0 ;
  
  arg1 = (CHSRspQryPositionDetailField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQrySysConfigField___() {
  void * jresult ;
  CHSReqQrySysConfigField *result = 0 ;
  
  result = (CHSReqQrySysConfigField *)new CHSReqQrySysConfigField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQrySysConfigField___(void * jarg1) {
  CHSReqQrySysConfigField *arg1 = (CHSReqQrySysConfigField *) 0 ;
  
  arg1 = (CHSReqQrySysConfigField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQrySysConfigField_ConfigNo_set___(void * jarg1, double jarg2) {
  CHSRspQrySysConfigField *arg1 = (CHSRspQrySysConfigField *) 0 ;
  HSConfigNo arg2 ;
  
  arg1 = (CHSRspQrySysConfigField *)jarg1; 
  arg2 = (HSConfigNo)jarg2; 
  if (arg1) (arg1)->ConfigNo = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQrySysConfigField_ConfigNo_get___(void * jarg1) {
  double jresult ;
  CHSRspQrySysConfigField *arg1 = (CHSRspQrySysConfigField *) 0 ;
  HSConfigNo result;
  
  arg1 = (CHSRspQrySysConfigField *)jarg1; 
  result = (HSConfigNo) ((arg1)->ConfigNo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQrySysConfigField_ConfigValue_set___(void * jarg1, char * jarg2) {
  CHSRspQrySysConfigField *arg1 = (CHSRspQrySysConfigField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSRspQrySysConfigField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ConfigValue, (const char *)arg2, 128-1);
      arg1->ConfigValue[128-1] = 0;
    } else {
      arg1->ConfigValue[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSRspQrySysConfigField_ConfigValue_get___(void * jarg1) {
  char * jresult ;
  CHSRspQrySysConfigField *arg1 = (CHSRspQrySysConfigField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSRspQrySysConfigField *)jarg1; 
  result = (char *) ((arg1)->ConfigValue);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSRspQrySysConfigField___() {
  void * jresult ;
  CHSRspQrySysConfigField *result = 0 ;
  
  result = (CHSRspQrySysConfigField *)new CHSRspQrySysConfigField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSRspQrySysConfigField___(void * jarg1) {
  CHSRspQrySysConfigField *arg1 = (CHSRspQrySysConfigField *) 0 ;
  
  arg1 = (CHSRspQrySysConfigField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqDepthMarketDataField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqDepthMarketDataField *arg1 = (CHSReqDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqDepthMarketDataField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqDepthMarketDataField *arg1 = (CHSReqDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqDepthMarketDataField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqDepthMarketDataField *arg1 = (CHSReqDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqDepthMarketDataField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqDepthMarketDataField *arg1 = (CHSReqDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqDepthMarketDataField___() {
  void * jresult ;
  CHSReqDepthMarketDataField *result = 0 ;
  
  result = (CHSReqDepthMarketDataField *)new CHSReqDepthMarketDataField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqDepthMarketDataField___(void * jarg1) {
  CHSReqDepthMarketDataField *arg1 = (CHSReqDepthMarketDataField *) 0 ;
  
  arg1 = (CHSReqDepthMarketDataField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryDepthMarketDataField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSReqQryDepthMarketDataField *arg1 = (CHSReqQryDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryDepthMarketDataField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryDepthMarketDataField *arg1 = (CHSReqQryDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryDepthMarketDataField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSReqQryDepthMarketDataField *arg1 = (CHSReqQryDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSReqQryDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSReqQryDepthMarketDataField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSReqQryDepthMarketDataField *arg1 = (CHSReqQryDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSReqQryDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSReqQryDepthMarketDataField___() {
  void * jresult ;
  CHSReqQryDepthMarketDataField *result = 0 ;
  
  result = (CHSReqQryDepthMarketDataField *)new CHSReqQryDepthMarketDataField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSReqQryDepthMarketDataField___(void * jarg1) {
  CHSReqQryDepthMarketDataField *arg1 = (CHSReqQryDepthMarketDataField *) 0 ;
  
  arg1 = (CHSReqQryDepthMarketDataField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_TradingDay_set___(void * jarg1, int jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSDate arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSDate)jarg2; 
  if (arg1) (arg1)->TradingDay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_TradingDay_get___(void * jarg1) {
  int jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSDate result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSDate) ((arg1)->TradingDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_InstrumentID_set___(void * jarg1, char * jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 32-1);
      arg1->InstrumentID[32-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_InstrumentID_get___(void * jarg1) {
  char * jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_ExchangeID_set___(void * jarg1, char * jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 4-1);
      arg1->ExchangeID[4-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_ExchangeID_get___(void * jarg1) {
  char * jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_LastPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->LastPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_LastPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->LastPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreSettlementPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->PreSettlementPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreSettlementPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->PreSettlementPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreClosePrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->PreClosePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreClosePrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->PreClosePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_OpenPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->OpenPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_OpenPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->OpenPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_HighestPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->HighestPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_HighestPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->HighestPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_LowestPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->LowestPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_LowestPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->LowestPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_TradeVolume_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->TradeVolume = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_TradeVolume_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->TradeVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_TradeBalance_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSBalance arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSBalance)jarg2; 
  if (arg1) (arg1)->TradeBalance = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_TradeBalance_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSBalance result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSBalance) ((arg1)->TradeBalance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_OpenInterest_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->OpenInterest = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_OpenInterest_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->OpenInterest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_ClosePrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->ClosePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_ClosePrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->ClosePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_SettlementPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_SettlementPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->SettlementPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_UpperLimitPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->UpperLimitPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_UpperLimitPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->UpperLimitPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_LowerLimitPrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->LowerLimitPrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_LowerLimitPrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->LowerLimitPrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreDelta_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSDelta arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSDelta)jarg2; 
  if (arg1) (arg1)->PreDelta = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreDelta_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSDelta result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSDelta) ((arg1)->PreDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_CurrDelta_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSDelta arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSDelta)jarg2; 
  if (arg1) (arg1)->CurrDelta = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_CurrDelta_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSDelta result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSDelta) ((arg1)->CurrDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_UpdateTime_set___(void * jarg1, int jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSTime arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSTime)jarg2; 
  if (arg1) (arg1)->UpdateTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_UpdateTime_get___(void * jarg1) {
  int jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSTime result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSTime) ((arg1)->UpdateTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice1_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->BidPrice1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice1_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->BidPrice1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume1_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->BidVolume1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume1_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->BidVolume1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice1_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->AskPrice1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice1_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->AskPrice1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume1_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AskVolume1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume1_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->AskVolume1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice2_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->BidPrice2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice2_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->BidPrice2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume2_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->BidVolume2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume2_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->BidVolume2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice2_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->AskPrice2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice2_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->AskPrice2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume2_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AskVolume2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume2_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->AskVolume2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice3_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->BidPrice3 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice3_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->BidPrice3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume3_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->BidVolume3 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume3_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->BidVolume3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice3_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->AskPrice3 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice3_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->AskPrice3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume3_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AskVolume3 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume3_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->AskVolume3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice4_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->BidPrice4 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice4_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->BidPrice4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume4_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->BidVolume4 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume4_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->BidVolume4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice4_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->AskPrice4 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice4_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->AskPrice4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume4_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AskVolume4 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume4_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->AskVolume4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice5_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->BidPrice5 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidPrice5_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->BidPrice5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume5_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->BidVolume5 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_BidVolume5_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->BidVolume5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice5_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->AskPrice5 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskPrice5_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->AskPrice5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume5_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->AskVolume5 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AskVolume5_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->AskVolume5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AveragePrice_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSPrice)jarg2; 
  if (arg1) (arg1)->AveragePrice = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_AveragePrice_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSPrice result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSPrice) ((arg1)->AveragePrice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreOpenInterest_set___(void * jarg1, double jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSVolume)jarg2; 
  if (arg1) (arg1)->PreOpenInterest = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_PreOpenInterest_get___(void * jarg1) {
  double jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSVolume result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSVolume) ((arg1)->PreOpenInterest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_InstrumentTradeStatus_set___(void * jarg1, char jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSInstrumentTradeStatus arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (HSInstrumentTradeStatus)jarg2; 
  if (arg1) (arg1)->InstrumentTradeStatus = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_InstrumentTradeStatus_get___(void * jarg1) {
  char jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  HSInstrumentTradeStatus result;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (HSInstrumentTradeStatus) ((arg1)->InstrumentTradeStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_OpenRestriction_set___(void * jarg1, char * jarg2) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OpenRestriction, (const char *)arg2, 64-1);
      arg1->OpenRestriction[64-1] = 0;
    } else {
      arg1->OpenRestriction[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSDepthMarketDataField_OpenRestriction_get___(void * jarg1) {
  char * jresult ;
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  result = (char *) ((arg1)->OpenRestriction);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSDepthMarketDataField___() {
  void * jresult ;
  CHSDepthMarketDataField *result = 0 ;
  
  result = (CHSDepthMarketDataField *)new CHSDepthMarketDataField();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSDepthMarketDataField___(void * jarg1) {
  CHSDepthMarketDataField *arg1 = (CHSDepthMarketDataField *) 0 ;
  
  arg1 = (CHSDepthMarketDataField *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnFrontConnected___(void * jarg1) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  (arg1)->OnFrontConnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnFrontConnectedSwigExplicitCHSTradeSpi___(void * jarg1) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  (arg1)->CHSTradeSpi::OnFrontConnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnFrontDisconnected___(void * jarg1, int jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  int arg2 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnFrontDisconnected(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnFrontDisconnectedSwigExplicitCHSTradeSpi___(void * jarg1, int jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  int arg2 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->CHSTradeSpi::OnFrontDisconnected(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspUserLogin___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspUserLoginField *arg2 = (CHSRspUserLoginField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspUserLoginField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspUserLoginSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspUserLoginField *arg2 = (CHSRspUserLoginField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspUserLoginField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspUserPasswordUpdate___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspUserPasswordUpdateField *arg2 = (CHSRspUserPasswordUpdateField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspUserPasswordUpdateField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserPasswordUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspUserPasswordUpdateSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspUserPasswordUpdateField *arg2 = (CHSRspUserPasswordUpdateField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspUserPasswordUpdateField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspUserPasswordUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorOrderInsert___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspOrderInsertField *arg2 = (CHSRspOrderInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspOrderInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspErrorOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorOrderInsertSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspOrderInsertField *arg2 = (CHSRspOrderInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspOrderInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspErrorOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspOrderAction___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspOrderActionField *arg2 = (CHSRspOrderActionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspOrderActionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspOrderActionSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspOrderActionField *arg2 = (CHSRspOrderActionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspOrderActionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorExerciseOrderInsert___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspExerciseOrderInsertField *arg2 = (CHSRspExerciseOrderInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspExerciseOrderInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspErrorExerciseOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorExerciseOrderInsertSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspExerciseOrderInsertField *arg2 = (CHSRspExerciseOrderInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspExerciseOrderInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspErrorExerciseOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspExerciseOrderAction___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspExerciseOrderActionField *arg2 = (CHSRspExerciseOrderActionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspExerciseOrderActionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspExerciseOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspExerciseOrderActionSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspExerciseOrderActionField *arg2 = (CHSRspExerciseOrderActionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspExerciseOrderActionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspExerciseOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorLockInsert___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspLockInsertField *arg2 = (CHSRspLockInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspLockInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspErrorLockInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorLockInsertSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspLockInsertField *arg2 = (CHSRspLockInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspLockInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspErrorLockInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspForQuoteInsert___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspForQuoteInsertField *arg2 = (CHSRspForQuoteInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspForQuoteInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspForQuoteInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspForQuoteInsertSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspForQuoteInsertField *arg2 = (CHSRspForQuoteInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspForQuoteInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspForQuoteInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorCombActionInsert___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspCombActionInsertField *arg2 = (CHSRspCombActionInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspCombActionInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspErrorCombActionInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspErrorCombActionInsertSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspCombActionInsertField *arg2 = (CHSRspCombActionInsertField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspCombActionInsertField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspErrorCombActionInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryMaxOrderVolume___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryMaxOrderVolumeField *arg2 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryMaxOrderVolumeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryMaxOrderVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryMaxOrderVolumeSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryMaxOrderVolumeField *arg2 = (CHSRspQueryMaxOrderVolumeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryMaxOrderVolumeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQueryMaxOrderVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryLockVolume___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryLockVolumeField *arg2 = (CHSRspQueryLockVolumeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryLockVolumeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryLockVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryLockVolumeSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryLockVolumeField *arg2 = (CHSRspQueryLockVolumeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryLockVolumeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQueryLockVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryExerciseVolume___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryExerciseVolumeField *arg2 = (CHSRspQueryExerciseVolumeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryExerciseVolumeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryExerciseVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryExerciseVolumeSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryExerciseVolumeField *arg2 = (CHSRspQueryExerciseVolumeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryExerciseVolumeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQueryExerciseVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryPosition___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryPositionField *arg2 = (CHSRspQryPositionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryPositionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryPositionSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryPositionField *arg2 = (CHSRspQryPositionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryPositionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryTradingAccount___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryTradingAccountField *arg2 = (CHSRspQryTradingAccountField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryTradingAccountField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTradingAccount(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryTradingAccountSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryTradingAccountField *arg2 = (CHSRspQryTradingAccountField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryTradingAccountField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryTradingAccount(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryOrder___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSOrderField *arg2 = (CHSOrderField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSOrderField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryOrderSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSOrderField *arg2 = (CHSOrderField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSOrderField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryTrade___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSTradeField *arg2 = (CHSTradeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSTradeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTrade(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryTradeSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSTradeField *arg2 = (CHSTradeField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSTradeField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryTrade(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryExercise___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSExerciseField *arg2 = (CHSExerciseField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSExerciseField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryExercise(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryExerciseSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSExerciseField *arg2 = (CHSExerciseField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSExerciseField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryExercise(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryLock___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSLockField *arg2 = (CHSLockField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSLockField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryLock(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryLockSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSLockField *arg2 = (CHSLockField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSLockField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryLock(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryCombAction___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSCombActionField *arg2 = (CHSCombActionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSCombActionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryCombAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryCombActionSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSCombActionField *arg2 = (CHSCombActionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSCombActionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryCombAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryPositionCombineDetail___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryPositionCombineDetailField *arg2 = (CHSRspQryPositionCombineDetailField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryPositionCombineDetailField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryPositionCombineDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryPositionCombineDetailSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryPositionCombineDetailField *arg2 = (CHSRspQryPositionCombineDetailField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryPositionCombineDetailField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryPositionCombineDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryInstrument___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryInstrumentField *arg2 = (CHSRspQryInstrumentField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryInstrumentField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInstrument(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryInstrumentSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryInstrumentField *arg2 = (CHSRspQryInstrumentField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryInstrumentField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryInstrument(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryCoveredShort___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryCoveredShortField *arg2 = (CHSRspQryCoveredShortField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryCoveredShortField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryCoveredShort(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryCoveredShortSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryCoveredShortField *arg2 = (CHSRspQryCoveredShortField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryCoveredShortField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryCoveredShort(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryExerciseAssign___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryExerciseAssignField *arg2 = (CHSRspQryExerciseAssignField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryExerciseAssignField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryExerciseAssign(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryExerciseAssignSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryExerciseAssignField *arg2 = (CHSRspQryExerciseAssignField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryExerciseAssignField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryExerciseAssign(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspTransfer___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspTransferField *arg2 = (CHSRspTransferField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspTransferField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspTransfer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspTransferSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspTransferField *arg2 = (CHSRspTransferField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspTransferField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspTransfer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryTransfer___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryTransferField *arg2 = (CHSRspQryTransferField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryTransferField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTransfer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryTransferSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryTransferField *arg2 = (CHSRspQryTransferField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryTransferField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryTransfer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryBankBalance___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryBankBalanceField *arg2 = (CHSRspQueryBankBalanceField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryBankBalanceField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryBankBalance(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryBankBalanceSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryBankBalanceField *arg2 = (CHSRspQueryBankBalanceField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryBankBalanceField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQueryBankBalance(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryBankAccount___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryBankAccountField *arg2 = (CHSRspQueryBankAccountField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryBankAccountField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryBankAccount(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryBankAccountSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryBankAccountField *arg2 = (CHSRspQueryBankAccountField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryBankAccountField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQueryBankAccount(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryBillContent___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryBillContentField *arg2 = (CHSRspQueryBillContentField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryBillContentField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryBillContent(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQueryBillContentSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQueryBillContentField *arg2 = (CHSRspQueryBillContentField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQueryBillContentField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQueryBillContent(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspBillConfirm___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspBillConfirmField *arg2 = (CHSRspBillConfirmField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspBillConfirmField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspBillConfirm(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspBillConfirmSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspBillConfirmField *arg2 = (CHSRspBillConfirmField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspBillConfirmField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspBillConfirm(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryMargin___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryMarginField *arg2 = (CHSRspQryMarginField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryMarginField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryMargin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryMarginSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryMarginField *arg2 = (CHSRspQryMarginField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryMarginField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryMargin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryCommission___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryCommissionField *arg2 = (CHSRspQryCommissionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryCommissionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryCommission(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryCommissionSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryCommissionField *arg2 = (CHSRspQryCommissionField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryCommissionField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryCommission(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryPositionDetail___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryPositionDetailField *arg2 = (CHSRspQryPositionDetailField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryPositionDetailField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryPositionDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryPositionDetailSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQryPositionDetailField *arg2 = (CHSRspQryPositionDetailField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQryPositionDetailField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryPositionDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQrySysConfig___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQrySysConfigField *arg2 = (CHSRspQrySysConfigField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQrySysConfigField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQrySysConfig(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQrySysConfigSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSRspQrySysConfigField *arg2 = (CHSRspQrySysConfigField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSRspQrySysConfigField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQrySysConfig(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryDepthMarketData___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSDepthMarketDataField *arg2 = (CHSDepthMarketDataField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSDepthMarketDataField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryDepthMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRspQryDepthMarketDataSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSDepthMarketDataField *arg2 = (CHSDepthMarketDataField *) 0 ;
  CHSRspInfoField *arg3 = (CHSRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSDepthMarketDataField *)jarg2; 
  arg3 = (CHSRspInfoField *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CHSTradeSpi::OnRspQryDepthMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnTrade___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSTradeField *arg2 = (CHSTradeField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSTradeField *)jarg2; 
  (arg1)->OnRtnTrade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnTradeSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSTradeField *arg2 = (CHSTradeField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSTradeField *)jarg2; 
  (arg1)->CHSTradeSpi::OnRtnTrade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnOrder___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSOrderField *arg2 = (CHSOrderField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSOrderField *)jarg2; 
  (arg1)->OnRtnOrder(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnOrderSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSOrderField *arg2 = (CHSOrderField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSOrderField *)jarg2; 
  (arg1)->CHSTradeSpi::OnRtnOrder(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnExercise___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSExerciseField *arg2 = (CHSExerciseField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSExerciseField *)jarg2; 
  (arg1)->OnRtnExercise(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnExerciseSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSExerciseField *arg2 = (CHSExerciseField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSExerciseField *)jarg2; 
  (arg1)->CHSTradeSpi::OnRtnExercise(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnCombAction___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSCombActionField *arg2 = (CHSCombActionField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSCombActionField *)jarg2; 
  (arg1)->OnRtnCombAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnCombActionSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSCombActionField *arg2 = (CHSCombActionField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSCombActionField *)jarg2; 
  (arg1)->CHSTradeSpi::OnRtnCombAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnLock___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSLockField *arg2 = (CHSLockField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSLockField *)jarg2; 
  (arg1)->OnRtnLock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_OnRtnLockSwigExplicitCHSTradeSpi___(void * jarg1, void * jarg2) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  CHSLockField *arg2 = (CHSLockField *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  arg2 = (CHSLockField *)jarg2; 
  (arg1)->CHSTradeSpi::OnRtnLock(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSTradeSpi___() {
  void * jresult ;
  CHSTradeSpi *result = 0 ;
  
  result = (CHSTradeSpi *)new SwigDirector_CHSTradeSpi();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_delete_CHSTradeSpi___(void * jarg1) {
  CHSTradeSpi *arg1 = (CHSTradeSpi *) 0 ;
  
  arg1 = (CHSTradeSpi *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeSpi_director_connect___(void *objarg, SwigDirector_CHSTradeSpi::SWIG_Callback0_t callback0, SwigDirector_CHSTradeSpi::SWIG_Callback1_t callback1, SwigDirector_CHSTradeSpi::SWIG_Callback2_t callback2, SwigDirector_CHSTradeSpi::SWIG_Callback3_t callback3, SwigDirector_CHSTradeSpi::SWIG_Callback4_t callback4, SwigDirector_CHSTradeSpi::SWIG_Callback5_t callback5, SwigDirector_CHSTradeSpi::SWIG_Callback6_t callback6, SwigDirector_CHSTradeSpi::SWIG_Callback7_t callback7, SwigDirector_CHSTradeSpi::SWIG_Callback8_t callback8, SwigDirector_CHSTradeSpi::SWIG_Callback9_t callback9, SwigDirector_CHSTradeSpi::SWIG_Callback10_t callback10, SwigDirector_CHSTradeSpi::SWIG_Callback11_t callback11, SwigDirector_CHSTradeSpi::SWIG_Callback12_t callback12, SwigDirector_CHSTradeSpi::SWIG_Callback13_t callback13, SwigDirector_CHSTradeSpi::SWIG_Callback14_t callback14, SwigDirector_CHSTradeSpi::SWIG_Callback15_t callback15, SwigDirector_CHSTradeSpi::SWIG_Callback16_t callback16, SwigDirector_CHSTradeSpi::SWIG_Callback17_t callback17, SwigDirector_CHSTradeSpi::SWIG_Callback18_t callback18, SwigDirector_CHSTradeSpi::SWIG_Callback19_t callback19, SwigDirector_CHSTradeSpi::SWIG_Callback20_t callback20, SwigDirector_CHSTradeSpi::SWIG_Callback21_t callback21, SwigDirector_CHSTradeSpi::SWIG_Callback22_t callback22, SwigDirector_CHSTradeSpi::SWIG_Callback23_t callback23, SwigDirector_CHSTradeSpi::SWIG_Callback24_t callback24, SwigDirector_CHSTradeSpi::SWIG_Callback25_t callback25, SwigDirector_CHSTradeSpi::SWIG_Callback26_t callback26, SwigDirector_CHSTradeSpi::SWIG_Callback27_t callback27, SwigDirector_CHSTradeSpi::SWIG_Callback28_t callback28, SwigDirector_CHSTradeSpi::SWIG_Callback29_t callback29, SwigDirector_CHSTradeSpi::SWIG_Callback30_t callback30, SwigDirector_CHSTradeSpi::SWIG_Callback31_t callback31, SwigDirector_CHSTradeSpi::SWIG_Callback32_t callback32, SwigDirector_CHSTradeSpi::SWIG_Callback33_t callback33, SwigDirector_CHSTradeSpi::SWIG_Callback34_t callback34, SwigDirector_CHSTradeSpi::SWIG_Callback35_t callback35, SwigDirector_CHSTradeSpi::SWIG_Callback36_t callback36, SwigDirector_CHSTradeSpi::SWIG_Callback37_t callback37, SwigDirector_CHSTradeSpi::SWIG_Callback38_t callback38, SwigDirector_CHSTradeSpi::SWIG_Callback39_t callback39, SwigDirector_CHSTradeSpi::SWIG_Callback40_t callback40) {
  CHSTradeSpi *obj = (CHSTradeSpi *)objarg;
  SwigDirector_CHSTradeSpi *director = dynamic_cast<SwigDirector_CHSTradeSpi *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReleaseApi___(void * jarg1) {
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  
  arg1 = (CHSTradeApi *)jarg1; 
  (arg1)->ReleaseApi();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_Init__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (int)(arg1)->Init((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_Init__SWIG_1___(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (int)(arg1)->Init((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_Init__SWIG_2___(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->Init((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_Init__SWIG_3___(void * jarg1, char * jarg2) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->Init((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_Join___(void * jarg1) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  result = (int)(arg1)->Join();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_RegisterSubModel___(void * jarg1, char * jarg2) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->RegisterSubModel((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_RegisterFront___(void * jarg1, char * jarg2) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->RegisterFront((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_RegisterFensServer___(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->RegisterFensServer((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_RegisterSpi___(void * jarg1, void * jarg2) {
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSTradeSpi *arg2 = (CHSTradeSpi *) 0 ;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSTradeSpi *)jarg2; 
  (arg1)->RegisterSpi(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_GetApiErrorMsg___(void * jarg1, int jarg2) {
  char * jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetApiErrorMsg(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_GetTradingDate___(void * jarg1) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  result = (int)(arg1)->GetTradingDate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqUserLogin___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqUserLoginField *arg2 = (CHSReqUserLoginField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqUserLoginField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserLogin(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqUserPasswordUpdate___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqUserPasswordUpdateField *arg2 = (CHSReqUserPasswordUpdateField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqUserPasswordUpdateField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserPasswordUpdate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqOrderInsert___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqOrderInsertField *arg2 = (CHSReqOrderInsertField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqOrderInsertField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqOrderInsert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqOrderAction___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqOrderActionField *arg2 = (CHSReqOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqOrderActionField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqOrderAction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqExerciseOrderInsert___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqExerciseOrderInsertField *arg2 = (CHSReqExerciseOrderInsertField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqExerciseOrderInsertField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqExerciseOrderInsert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqExerciseOrderAction___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqExerciseOrderActionField *arg2 = (CHSReqExerciseOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqExerciseOrderActionField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqExerciseOrderAction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqLockInsert___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqLockInsertField *arg2 = (CHSReqLockInsertField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqLockInsertField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqLockInsert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqForQuoteInsert___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqForQuoteInsertField *arg2 = (CHSReqForQuoteInsertField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqForQuoteInsertField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqForQuoteInsert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqCombActionInsert___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqCombActionInsertField *arg2 = (CHSReqCombActionInsertField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqCombActionInsertField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqCombActionInsert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQueryMaxOrderVolume___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQueryMaxOrderVolumeField *arg2 = (CHSReqQueryMaxOrderVolumeField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQueryMaxOrderVolumeField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryMaxOrderVolume(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQueryLockVolume___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQueryLockVolumeField *arg2 = (CHSReqQueryLockVolumeField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQueryLockVolumeField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryLockVolume(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQueryExerciseVolume___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQueryExerciseVolumeField *arg2 = (CHSReqQueryExerciseVolumeField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQueryExerciseVolumeField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryExerciseVolume(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryPosition___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryPositionField *arg2 = (CHSReqQryPositionField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryPositionField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryPosition(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryTradingAccount___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryTradingAccountField *arg2 = (CHSReqQryTradingAccountField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryTradingAccountField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTradingAccount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryOrder___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryOrderField *arg2 = (CHSReqQryOrderField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryOrderField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryOrder(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryTrade___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryTradeField *arg2 = (CHSReqQryTradeField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryTradeField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTrade(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryExercise___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryExerciseField *arg2 = (CHSReqQryExerciseField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryExerciseField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryExercise(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryLock___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryLockField *arg2 = (CHSReqQryLockField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryLockField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryLock(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryCombAction___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryCombActionField *arg2 = (CHSReqQryCombActionField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryCombActionField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryCombAction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryPositionCombineDetail___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryPositionCombineDetailField *arg2 = (CHSReqQryPositionCombineDetailField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryPositionCombineDetailField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryPositionCombineDetail(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryInstrument___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryInstrumentField *arg2 = (CHSReqQryInstrumentField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryInstrumentField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInstrument(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryCoveredShort___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryCoveredShortField *arg2 = (CHSReqQryCoveredShortField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryCoveredShortField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryCoveredShort(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryExerciseAssign___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryExerciseAssignField *arg2 = (CHSReqQryExerciseAssignField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryExerciseAssignField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryExerciseAssign(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqTransfer___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqTransferField *arg2 = (CHSReqTransferField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqTransferField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqTransfer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryTransfer___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryTransferField *arg2 = (CHSReqQryTransferField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryTransferField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTransfer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQueryBankBalance___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQueryBankBalanceField *arg2 = (CHSReqQueryBankBalanceField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQueryBankBalanceField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryBankBalance(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQueryBankAccount___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQueryBankAccountField *arg2 = (CHSReqQueryBankAccountField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQueryBankAccountField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryBankAccount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQueryBillContent___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQueryBillContentField *arg2 = (CHSReqQueryBillContentField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQueryBillContentField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryBillContent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqBillConfirm___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqBillConfirmField *arg2 = (CHSReqBillConfirmField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqBillConfirmField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqBillConfirm(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryMargin___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryMarginField *arg2 = (CHSReqQryMarginField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryMarginField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryMargin(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryCommission___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryCommissionField *arg2 = (CHSReqQryCommissionField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryCommissionField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryCommission(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryPositionDetail___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryPositionDetailField *arg2 = (CHSReqQryPositionDetailField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryPositionDetailField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryPositionDetail(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQrySysConfig___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQrySysConfigField *arg2 = (CHSReqQrySysConfigField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQrySysConfigField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQrySysConfig(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_ReqQryDepthMarketData___(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CHSTradeApi *arg1 = (CHSTradeApi *) 0 ;
  CHSReqQryDepthMarketDataField *arg2 = (CHSReqQryDepthMarketDataField *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CHSTradeApi *)jarg1; 
  arg2 = (CHSReqQryDepthMarketDataField *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryDepthMarketData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_new_CHSTradeApi___() {
  void * jresult ;
  CHSTradeApi *result = 0 ;
  
  result = (CHSTradeApi *)new SwigDirector_CHSTradeApi();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTACSharpfHSfTrade_CHSTradeApi_director_connect___(void *objarg, SwigDirector_CHSTradeApi::SWIG_Callback0_t callback0, SwigDirector_CHSTradeApi::SWIG_Callback1_t callback1, SwigDirector_CHSTradeApi::SWIG_Callback2_t callback2, SwigDirector_CHSTradeApi::SWIG_Callback3_t callback3, SwigDirector_CHSTradeApi::SWIG_Callback4_t callback4, SwigDirector_CHSTradeApi::SWIG_Callback5_t callback5, SwigDirector_CHSTradeApi::SWIG_Callback6_t callback6, SwigDirector_CHSTradeApi::SWIG_Callback7_t callback7, SwigDirector_CHSTradeApi::SWIG_Callback8_t callback8, SwigDirector_CHSTradeApi::SWIG_Callback9_t callback9, SwigDirector_CHSTradeApi::SWIG_Callback10_t callback10, SwigDirector_CHSTradeApi::SWIG_Callback11_t callback11, SwigDirector_CHSTradeApi::SWIG_Callback12_t callback12, SwigDirector_CHSTradeApi::SWIG_Callback13_t callback13, SwigDirector_CHSTradeApi::SWIG_Callback14_t callback14, SwigDirector_CHSTradeApi::SWIG_Callback15_t callback15, SwigDirector_CHSTradeApi::SWIG_Callback16_t callback16, SwigDirector_CHSTradeApi::SWIG_Callback17_t callback17, SwigDirector_CHSTradeApi::SWIG_Callback18_t callback18, SwigDirector_CHSTradeApi::SWIG_Callback19_t callback19, SwigDirector_CHSTradeApi::SWIG_Callback20_t callback20, SwigDirector_CHSTradeApi::SWIG_Callback21_t callback21, SwigDirector_CHSTradeApi::SWIG_Callback22_t callback22, SwigDirector_CHSTradeApi::SWIG_Callback23_t callback23, SwigDirector_CHSTradeApi::SWIG_Callback24_t callback24, SwigDirector_CHSTradeApi::SWIG_Callback25_t callback25, SwigDirector_CHSTradeApi::SWIG_Callback26_t callback26, SwigDirector_CHSTradeApi::SWIG_Callback27_t callback27, SwigDirector_CHSTradeApi::SWIG_Callback28_t callback28, SwigDirector_CHSTradeApi::SWIG_Callback29_t callback29, SwigDirector_CHSTradeApi::SWIG_Callback30_t callback30, SwigDirector_CHSTradeApi::SWIG_Callback31_t callback31, SwigDirector_CHSTradeApi::SWIG_Callback32_t callback32, SwigDirector_CHSTradeApi::SWIG_Callback33_t callback33, SwigDirector_CHSTradeApi::SWIG_Callback34_t callback34, SwigDirector_CHSTradeApi::SWIG_Callback35_t callback35, SwigDirector_CHSTradeApi::SWIG_Callback36_t callback36, SwigDirector_CHSTradeApi::SWIG_Callback37_t callback37, SwigDirector_CHSTradeApi::SWIG_Callback38_t callback38, SwigDirector_CHSTradeApi::SWIG_Callback39_t callback39, SwigDirector_CHSTradeApi::SWIG_Callback40_t callback40, SwigDirector_CHSTradeApi::SWIG_Callback41_t callback41, SwigDirector_CHSTradeApi::SWIG_Callback42_t callback42, SwigDirector_CHSTradeApi::SWIG_Callback43_t callback43, SwigDirector_CHSTradeApi::SWIG_Callback44_t callback44, SwigDirector_CHSTradeApi::SWIG_Callback45_t callback45) {
  CHSTradeApi *obj = (CHSTradeApi *)objarg;
  SwigDirector_CHSTradeApi *director = dynamic_cast<SwigDirector_CHSTradeApi *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40, callback41, callback42, callback43, callback44, callback45);
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_GetTradeApiVersion___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)GetTradeApiVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTACSharpfHSfTrade_NewTradeApi___(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CHSTradeApi *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CHSTradeApi *)NewTradeApi((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

